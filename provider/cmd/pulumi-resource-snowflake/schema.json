{
    "name": "snowflake",
    "description": "A Pulumi package for creating and managing snowflake cloud resources.",
    "keywords": [
        "pulumi",
        "snowflake"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`snowflake` Terraform Provider](https://github.com/chanzuckerberg/terraform-provider-snowflake).",
    "repository": "https://github.com/pulumi/pulumi-snowflake",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "account": {
                "type": "string"
            },
            "browserAuth": {
                "type": "boolean"
            },
            "oauthAccessToken": {
                "type": "string"
            },
            "oauthClientId": {
                "type": "string"
            },
            "oauthClientSecret": {
                "type": "string"
            },
            "oauthEndpoint": {
                "type": "string"
            },
            "oauthRedirectUrl": {
                "type": "string"
            },
            "oauthRefreshToken": {
                "type": "string"
            },
            "password": {
                "type": "string"
            },
            "privateKey": {
                "type": "string"
            },
            "privateKeyPath": {
                "type": "string"
            },
            "region": {
                "type": "string"
            },
            "role": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "defaults": [
            "account",
            "region",
            "username"
        ]
    },
    "types": {
        "snowflake:index/ExternalFunctionArg:ExternalFunctionArg": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Argument name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Argument type, e.g. VARCHAR\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Header name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Header value\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "snowflake:index/ExternalTableColumn:ExternalTableColumn": {
            "properties": {
                "as": {
                    "type": "string",
                    "description": "String that specifies the expression for the column. When queried, the column returns results derived from this expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Column name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "as",
                "name",
                "type"
            ]
        },
        "snowflake:index/FunctionGrantArgument:FunctionGrantArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The argument type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/ProcedureGrantArgument:ProcedureGrantArgument": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The argument name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The argument type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "snowflake:index/TableColumn:TableColumn": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Column name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Column type, e.g. VARIANT\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the snowflake package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "account": {
                "type": "string"
            },
            "browserAuth": {
                "type": "boolean"
            },
            "oauthAccessToken": {
                "type": "string"
            },
            "oauthClientId": {
                "type": "string"
            },
            "oauthClientSecret": {
                "type": "string"
            },
            "oauthEndpoint": {
                "type": "string"
            },
            "oauthRedirectUrl": {
                "type": "string"
            },
            "oauthRefreshToken": {
                "type": "string"
            },
            "password": {
                "type": "string"
            },
            "privateKey": {
                "type": "string"
            },
            "privateKeyPath": {
                "type": "string"
            },
            "region": {
                "type": "string"
            },
            "role": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "required": [
            "account",
            "region",
            "username"
        ],
        "inputProperties": {
            "account": {
                "type": "string"
            },
            "browserAuth": {
                "type": "boolean"
            },
            "oauthAccessToken": {
                "type": "string"
            },
            "oauthClientId": {
                "type": "string"
            },
            "oauthClientSecret": {
                "type": "string"
            },
            "oauthEndpoint": {
                "type": "string"
            },
            "oauthRedirectUrl": {
                "type": "string"
            },
            "oauthRefreshToken": {
                "type": "string"
            },
            "password": {
                "type": "string"
            },
            "privateKey": {
                "type": "string"
            },
            "privateKeyPath": {
                "type": "string"
            },
            "region": {
                "type": "string"
            },
            "role": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "account",
            "region",
            "username"
        ]
    },
    "resources": {
        "snowflake:index/accountGrant:AccountGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.AccountGrant(\"grant\", {\n    privilege: \"CREATE ROLE\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.AccountGrant(\"grant\",\n    privilege=\"CREATE ROLE\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.AccountGrant(\"grant\", new Snowflake.AccountGrantArgs\n        {\n            Privilege = \"CREATE ROLE\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewAccountGrant(ctx, \"grant\", \u0026snowflake.AccountGrantArgs{\n\t\t\tPrivilege: pulumi.String(\"CREATE ROLE\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is account name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/accountGrant:AccountGrant example 'accountName|USAGE|true'\n```\n\n ",
            "properties": {
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the account.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "inputProperties": {
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the account.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountGrant resources.\n",
                "properties": {
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the account.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/apiIntegration:ApiIntegration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst apiIntegration = new snowflake.ApiIntegration(\"api_integration\", {\n    apiAllowedPrefixes: [\"https://123456.execute-api.us-west-2.amazonaws.com/prod/\"],\n    apiAwsRoleArn: \"arn:aws:iam::000000000001:/role/test\",\n    apiProvider: \"aws_api_gateway\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\napi_integration = snowflake.ApiIntegration(\"apiIntegration\",\n    api_allowed_prefixes=[\"https://123456.execute-api.us-west-2.amazonaws.com/prod/\"],\n    api_aws_role_arn=\"arn:aws:iam::000000000001:/role/test\",\n    api_provider=\"aws_api_gateway\",\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var apiIntegration = new Snowflake.ApiIntegration(\"apiIntegration\", new Snowflake.ApiIntegrationArgs\n        {\n            ApiAllowedPrefixes = \n            {\n                \"https://123456.execute-api.us-west-2.amazonaws.com/prod/\",\n            },\n            ApiAwsRoleArn = \"arn:aws:iam::000000000001:/role/test\",\n            ApiProvider = \"aws_api_gateway\",\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewApiIntegration(ctx, \"apiIntegration\", \u0026snowflake.ApiIntegrationArgs{\n\t\t\tApiAllowedPrefixes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://123456.execute-api.us-west-2.amazonaws.com/prod/\"),\n\t\t\t},\n\t\t\tApiAwsRoleArn: pulumi.String(\"arn:aws:iam::000000000001:/role/test\"),\n\t\t\tApiProvider:   pulumi.String(\"aws_api_gateway\"),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/apiIntegration:ApiIntegration example name\n```\n\n ",
            "properties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                },
                "apiAwsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                },
                "apiAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n"
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureConsentUrl": {
                    "type": "string"
                },
                "azureMultiTenantAppName": {
                    "type": "string"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the API integration was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n"
                }
            },
            "required": [
                "apiAllowedPrefixes",
                "apiAwsExternalId",
                "apiAwsIamUserArn",
                "apiProvider",
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "name"
            ],
            "inputProperties": {
                "apiAllowedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                },
                "apiAwsRoleArn": {
                    "type": "string",
                    "description": "ARN of a cloud platform role.\n"
                },
                "apiBlockedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                },
                "apiProvider": {
                    "type": "string",
                    "description": "Specifies the HTTPS proxy service type.\n"
                },
                "azureAdApplicationId": {
                    "type": "string",
                    "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n"
                }
            },
            "requiredInputs": [
                "apiAllowedPrefixes",
                "apiProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiIntegration resources.\n",
                "properties": {
                    "apiAllowedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external functions that use the integration to reference one or more HTTPS proxy service endpoints and resources within those proxies.\n"
                    },
                    "apiAwsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                    },
                    "apiAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "apiAwsRoleArn": {
                        "type": "string",
                        "description": "ARN of a cloud platform role.\n"
                    },
                    "apiBlockedPrefixes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Lists the endpoints and resources in the HTTPS proxy service that are not allowed to be called from Snowflake.\n"
                    },
                    "apiProvider": {
                        "type": "string",
                        "description": "Specifies the HTTPS proxy service type.\n"
                    },
                    "azureAdApplicationId": {
                        "type": "string",
                        "description": "The 'Application (client) id' of the Azure AD app for your remote service.\n"
                    },
                    "azureConsentUrl": {
                        "type": "string"
                    },
                    "azureMultiTenantAppName": {
                        "type": "string"
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "Specifies the ID for your Office 365 tenant that all Azure API Management instances belong to.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the API integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether this API integration is enabled or disabled. If the API integration is disabled, any external function that relies on it will not work.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the API integration. This name follows the rules for Object Identifiers. The name should be unique among api integrations in your account.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/database:Database": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst test = new snowflake.Database(\"test\", {\n    comment: \"test comment\",\n    dataRetentionTimeInDays: 3,\n});\nconst test2 = new snowflake.Database(\"test2\", {\n    comment: \"test comment 2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ntest = snowflake.Database(\"test\",\n    comment=\"test comment\",\n    data_retention_time_in_days=3)\ntest2 = snowflake.Database(\"test2\", comment=\"test comment 2\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Snowflake.Database(\"test\", new Snowflake.DatabaseArgs\n        {\n            Comment = \"test comment\",\n            DataRetentionTimeInDays = 3,\n        });\n        var test2 = new Snowflake.Database(\"test2\", new Snowflake.DatabaseArgs\n        {\n            Comment = \"test comment 2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewDatabase(ctx, \"test\", \u0026snowflake.DatabaseArgs{\n\t\t\tComment:                 pulumi.String(\"test comment\"),\n\t\t\tDataRetentionTimeInDays: pulumi.Int(3),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = snowflake.NewDatabase(ctx, \"test2\", \u0026snowflake.DatabaseArgs{\n\t\t\tComment: pulumi.String(\"test comment 2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/database:Database example name\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer"
                },
                "fromDatabase": {
                    "type": "string",
                    "description": "Specify a database to create a clone from.\n"
                },
                "fromShare": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Specify a provider and a share in this map to create a database from a share.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "dataRetentionTimeInDays",
                "name"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string"
                },
                "dataRetentionTimeInDays": {
                    "type": "integer"
                },
                "fromDatabase": {
                    "type": "string",
                    "description": "Specify a database to create a clone from.\n"
                },
                "fromShare": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Specify a provider and a share in this map to create a database from a share.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "dataRetentionTimeInDays": {
                        "type": "integer"
                    },
                    "fromDatabase": {
                        "type": "string",
                        "description": "Specify a database to create a clone from.\n"
                    },
                    "fromShare": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Specify a provider and a share in this map to create a database from a share.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/databaseGrant:DatabaseGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.DatabaseGrant(\"grant\", {\n    databaseName: \"db\",\n    privilege: \"USAGE\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.DatabaseGrant(\"grant\",\n    database_name=\"db\",\n    privilege=\"USAGE\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    shares=[\n        \"share1\",\n        \"share2\",\n    ],\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.DatabaseGrant(\"grant\", new Snowflake.DatabaseGrantArgs\n        {\n            DatabaseName = \"db\",\n            Privilege = \"USAGE\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            Shares = \n            {\n                \"share1\",\n                \"share2\",\n            },\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewDatabaseGrant(ctx, \"grant\", \u0026snowflake.DatabaseGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"db\"),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | | | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/databaseGrant:DatabaseGrant example 'databaseName|||USAGE|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database on which to grant privileges.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the database.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database on which to grant privileges.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the database.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database on which to grant privileges.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the database.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalFunction:ExternalFunction": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst testExtFunc = new snowflake.ExternalFunction(\"test_ext_func\", {\n    apiIntegration: \"api_integration_name\",\n    args: [\n        {\n            name: \"arg1\",\n            type: \"varchar\",\n        },\n        {\n            name: \"arg2\",\n            type: \"varchar\",\n        },\n    ],\n    database: \"my_test_db\",\n    returnBehavior: \"IMMUTABLE\",\n    returnType: \"varchar\",\n    schema: \"my_test_schema\",\n    urlOfProxyAndResource: \"https://123456.execute-api.us-west-2.amazonaws.com/prod/test_func\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ntest_ext_func = snowflake.ExternalFunction(\"testExtFunc\",\n    api_integration=\"api_integration_name\",\n    args=[\n        snowflake.ExternalFunctionArgArgs(\n            name=\"arg1\",\n            type=\"varchar\",\n        ),\n        snowflake.ExternalFunctionArgArgs(\n            name=\"arg2\",\n            type=\"varchar\",\n        ),\n    ],\n    database=\"my_test_db\",\n    return_behavior=\"IMMUTABLE\",\n    return_type=\"varchar\",\n    schema=\"my_test_schema\",\n    url_of_proxy_and_resource=\"https://123456.execute-api.us-west-2.amazonaws.com/prod/test_func\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testExtFunc = new Snowflake.ExternalFunction(\"testExtFunc\", new Snowflake.ExternalFunctionArgs\n        {\n            ApiIntegration = \"api_integration_name\",\n            Args = \n            {\n                new Snowflake.Inputs.ExternalFunctionArgArgs\n                {\n                    Name = \"arg1\",\n                    Type = \"varchar\",\n                },\n                new Snowflake.Inputs.ExternalFunctionArgArgs\n                {\n                    Name = \"arg2\",\n                    Type = \"varchar\",\n                },\n            },\n            Database = \"my_test_db\",\n            ReturnBehavior = \"IMMUTABLE\",\n            ReturnType = \"varchar\",\n            Schema = \"my_test_schema\",\n            UrlOfProxyAndResource = \"https://123456.execute-api.us-west-2.amazonaws.com/prod/test_func\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewExternalFunction(ctx, \"testExtFunc\", \u0026snowflake.ExternalFunctionArgs{\n\t\t\tApiIntegration: pulumi.String(\"api_integration_name\"),\n\t\t\tArgs: ExternalFunctionArgArray{\n\t\t\t\t\u0026ExternalFunctionArgArgs{\n\t\t\t\t\tName: pulumi.String(\"arg1\"),\n\t\t\t\t\tType: pulumi.String(\"varchar\"),\n\t\t\t\t},\n\t\t\t\t\u0026ExternalFunctionArgArgs{\n\t\t\t\t\tName: pulumi.String(\"arg2\"),\n\t\t\t\t\tType: pulumi.String(\"varchar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDatabase:              pulumi.String(\"my_test_db\"),\n\t\t\tReturnBehavior:        pulumi.String(\"IMMUTABLE\"),\n\t\t\tReturnType:            pulumi.String(\"varchar\"),\n\t\t\tSchema:                pulumi.String(\"my_test_schema\"),\n\t\t\tUrlOfProxyAndResource: pulumi.String(\"https://123456.execute-api.us-west-2.amazonaws.com/prod/test_func\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | external function name | \u003clist of function arg types, separated with '-'\u003e\n\n```sh\n $ pulumi import snowflake:index/externalFunction:ExternalFunction example 'dbName|schemaName|externalFunctionName|varchar-varchar-varchar'\n```\n\n ",
            "properties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n"
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the external function was created.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n"
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the external function when called with null inputs.\n"
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n"
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether the function can return NULL values or must return only NON-NULL values.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n"
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n"
                }
            },
            "required": [
                "apiIntegration",
                "createdOn",
                "database",
                "name",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "inputProperties": {
                "apiIntegration": {
                    "type": "string",
                    "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                    },
                    "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "A description of the external function.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n"
                },
                "contextHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Binds Snowflake context function results to HTTP headers.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external function.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                    },
                    "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n"
                },
                "maxBatchRows": {
                    "type": "integer",
                    "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n"
                },
                "nullInputBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the external function when called with null inputs.\n"
                },
                "returnBehavior": {
                    "type": "string",
                    "description": "Specifies the behavior of the function when returning results\n"
                },
                "returnNullAllowed": {
                    "type": "boolean",
                    "description": "Indicates whether the function can return NULL values or must return only NON-NULL values.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "Specifies the data type returned by the external function.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external function.\n"
                },
                "urlOfProxyAndResource": {
                    "type": "string",
                    "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n"
                }
            },
            "requiredInputs": [
                "apiIntegration",
                "database",
                "returnBehavior",
                "returnType",
                "schema",
                "urlOfProxyAndResource"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalFunction resources.\n",
                "properties": {
                    "apiIntegration": {
                        "type": "string",
                        "description": "The name of the API integration object that should be used to authenticate the call to the proxy service.\n"
                    },
                    "args": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionArg:ExternalFunctionArg"
                        },
                        "description": "Specifies the arguments/inputs for the external function. These should correspond to the arguments that the remote service expects.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "A description of the external function.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "If specified, the JSON payload is compressed when sent from Snowflake to the proxy service, and when sent back from the proxy service to Snowflake.\n"
                    },
                    "contextHeaders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Binds Snowflake context function results to HTTP headers.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the external function was created.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external function.\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalFunctionHeader:ExternalFunctionHeader"
                        },
                        "description": "Allows users to specify key-value metadata that is sent with every request as HTTP headers.\n"
                    },
                    "maxBatchRows": {
                        "type": "integer",
                        "description": "This specifies the maximum number of rows in each batch sent to the proxy service.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external function. The identifier can contain the schema name and database name, as well as the function name. The function's signature (name and argument data types) must be unique within the schema.\n"
                    },
                    "nullInputBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the external function when called with null inputs.\n"
                    },
                    "returnBehavior": {
                        "type": "string",
                        "description": "Specifies the behavior of the function when returning results\n"
                    },
                    "returnNullAllowed": {
                        "type": "boolean",
                        "description": "Indicates whether the function can return NULL values or must return only NON-NULL values.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "Specifies the data type returned by the external function.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external function.\n"
                    },
                    "urlOfProxyAndResource": {
                        "type": "string",
                        "description": "This is the invocation URL of the proxy service and resource through which Snowflake calls the remote service.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalTable:ExternalTable": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst externalTable = new snowflake.ExternalTable(\"external_table\", {\n    columns: [\n        {\n            name: \"id\",\n            type: \"int\",\n        },\n        {\n            name: \"data\",\n            type: \"text\",\n        },\n    ],\n    comment: \"External table\",\n    database: \"db\",\n    schema: \"schema\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nexternal_table = snowflake.ExternalTable(\"externalTable\",\n    columns=[\n        snowflake.ExternalTableColumnArgs(\n            name=\"id\",\n            type=\"int\",\n        ),\n        snowflake.ExternalTableColumnArgs(\n            name=\"data\",\n            type=\"text\",\n        ),\n    ],\n    comment=\"External table\",\n    database=\"db\",\n    schema=\"schema\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var externalTable = new Snowflake.ExternalTable(\"externalTable\", new Snowflake.ExternalTableArgs\n        {\n            Columns = \n            {\n                new Snowflake.Inputs.ExternalTableColumnArgs\n                {\n                    Name = \"id\",\n                    Type = \"int\",\n                },\n                new Snowflake.Inputs.ExternalTableColumnArgs\n                {\n                    Name = \"data\",\n                    Type = \"text\",\n                },\n            },\n            Comment = \"External table\",\n            Database = \"db\",\n            Schema = \"schema\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewExternalTable(ctx, \"externalTable\", \u0026snowflake.ExternalTableArgs{\n\t\t\tColumns: ExternalTableColumnArray{\n\t\t\t\t\u0026ExternalTableColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"id\"),\n\t\t\t\t\tType: pulumi.String(\"int\"),\n\t\t\t\t},\n\t\t\t\t\u0026ExternalTableColumnArgs{\n\t\t\t\t\tName: pulumi.String(\"data\"),\n\t\t\t\t\tType: pulumi.String(\"text\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tComment:  pulumi.String(\"External table\"),\n\t\t\tDatabase: pulumi.String(\"db\"),\n\t\t\tSchema:   pulumi.String(\"schema\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | external table name\n\n```sh\n $ pulumi import snowflake:index/externalTable:ExternalTable example 'dbName|schemaName|externalTableName'\n```\n\n ",
            "properties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n"
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n"
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the external table.\n"
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n"
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "Specifies weather to refresh when an external table is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n"
                }
            },
            "required": [
                "columns",
                "database",
                "fileFormat",
                "location",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoRefresh": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n"
                },
                "awsSnsTopic": {
                    "type": "string",
                    "description": "Specifies the aws sns topic for the external table.\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                    },
                    "description": "Definitions of a column to create in the external table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the external table.\n"
                },
                "copyGrants": {
                    "type": "boolean",
                    "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the external table.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the external table.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Specifies a location for the external table.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n"
                },
                "partitionBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies any partition columns to evaluate for the external table.\n"
                },
                "refreshOnCreate": {
                    "type": "boolean",
                    "description": "Specifies weather to refresh when an external table is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the external table.\n"
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "fileFormat",
                "location",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalTable resources.\n",
                "properties": {
                    "autoRefresh": {
                        "type": "boolean",
                        "description": "Specifies whether to automatically refresh the external table metadata once, immediately after the external table is created.\n"
                    },
                    "awsSnsTopic": {
                        "type": "string",
                        "description": "Specifies the aws sns topic for the external table.\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ExternalTableColumn:ExternalTableColumn"
                        },
                        "description": "Definitions of a column to create in the external table. Minimum one required.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the external table.\n"
                    },
                    "copyGrants": {
                        "type": "boolean",
                        "description": "Specifies to retain the access permissions from the original table when an external table is recreated using the CREATE OR REPLACE TABLE variant\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the external table.\n"
                    },
                    "fileFormat": {
                        "type": "string",
                        "description": "Specifies the file format for the external table.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Specifies a location for the external table.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the external table; must be unique for the database and schema in which the externalTable is created.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the external table.\n"
                    },
                    "partitionBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies any partition columns to evaluate for the external table.\n"
                    },
                    "refreshOnCreate": {
                        "type": "boolean",
                        "description": "Specifies weather to refresh when an external table is created.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the external table.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/externalTableGrant:ExternalTableGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.ExternalTableGrant(\"grant\", {\n    databaseName: \"db\",\n    externalTableName: \"external_table\",\n    onFuture: false,\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.ExternalTableGrant(\"grant\",\n    database_name=\"db\",\n    external_table_name=\"external_table\",\n    on_future=False,\n    privilege=\"select\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    shares=[\n        \"share1\",\n        \"share2\",\n    ],\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.ExternalTableGrant(\"grant\", new Snowflake.ExternalTableGrantArgs\n        {\n            DatabaseName = \"db\",\n            ExternalTableName = \"external_table\",\n            OnFuture = false,\n            Privilege = \"select\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            Shares = \n            {\n                \"share1\",\n                \"share2\",\n            },\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewExternalTableGrant(ctx, \"grant\", \u0026snowflake.ExternalTableGrantArgs{\n\t\t\tDatabaseName:      pulumi.String(\"db\"),\n\t\t\tExternalTableName: pulumi.String(\"external_table\"),\n\t\t\tOnFuture:          pulumi.Bool(false),\n\t\t\tPrivilege:         pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | external table name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/externalTableGrant:ExternalTableGrant example 'dbName|schemaName|externalTableName|SELECT|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future external tables on which to grant privileges.\n"
                },
                "externalTableName": {
                    "type": "string",
                    "description": "The name of the external table on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future external table.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future external tables on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future external tables on which to grant privileges.\n"
                },
                "externalTableName": {
                    "type": "string",
                    "description": "The name of the external table on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future external table.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future external tables on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExternalTableGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future external tables on which to grant privileges.\n"
                    },
                    "externalTableName": {
                        "type": "string",
                        "description": "The name of the external table on which to grant privileges immediately (only valid if on_future is false).\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future external tables in the given schema. When this is true and no schema*name is provided apply this grant on all future external tables in the given database. The external*table*name and shares fields must be unset in order to use on_future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future external table.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future external tables on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/fileFormat:FileFormat": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst exampleFileFormat = new snowflake.FileFormat(\"example_file_format\", {\n    database: \"EXAMPLE_DB\",\n    formatType: \"CSV\",\n    schema: \"EXAMPLE_SCHEMA\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nexample_file_format = snowflake.FileFormat(\"exampleFileFormat\",\n    database=\"EXAMPLE_DB\",\n    format_type=\"CSV\",\n    schema=\"EXAMPLE_SCHEMA\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleFileFormat = new Snowflake.FileFormat(\"exampleFileFormat\", new Snowflake.FileFormatArgs\n        {\n            Database = \"EXAMPLE_DB\",\n            FormatType = \"CSV\",\n            Schema = \"EXAMPLE_SCHEMA\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewFileFormat(ctx, \"exampleFileFormat\", \u0026snowflake.FileFormatArgs{\n\t\t\tDatabase:   pulumi.String(\"EXAMPLE_DB\"),\n\t\t\tFormatType: pulumi.String(\"CSV\"),\n\t\t\tSchema:     pulumi.String(\"EXAMPLE_SCHEMA\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | file format name\n\n```sh\n $ pulumi import snowflake:index/fileFormat:FileFormat example 'dbName|schemaName|fileFormatName'\n```\n\n ",
            "properties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n"
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n"
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n"
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                },
                "validateUtf8": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to validate UTF-8 character encoding in string column data.\n"
                }
            },
            "required": [
                "database",
                "formatType",
                "name",
                "schema"
            ],
            "inputProperties": {
                "allowDuplicate": {
                    "type": "boolean",
                    "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                },
                "binaryAsText": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                },
                "binaryFormat": {
                    "type": "string",
                    "description": "Defines the encoding format for binary input or output.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the file format.\n"
                },
                "compression": {
                    "type": "string",
                    "description": "Specifies the current compression algorithm for the data file.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the file format.\n"
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                },
                "disableAutoConvert": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                },
                "disableSnowflakeData": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                },
                "emptyFieldAsNull": {
                    "type": "boolean",
                    "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                },
                "enableOctal": {
                    "type": "boolean",
                    "description": "Boolean that enables parsing of octal numbers.\n"
                },
                "encoding": {
                    "type": "string",
                    "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                },
                "errorOnColumnCountMismatch": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                },
                "escape": {
                    "type": "string",
                    "description": "Single character string used as the escape character for field values.\n"
                },
                "escapeUnenclosedField": {
                    "type": "string",
                    "description": "Single character string used as the escape character for unenclosed field values only.\n"
                },
                "fieldDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "fieldOptionallyEnclosedBy": {
                    "type": "string",
                    "description": "Character used to enclose strings.\n"
                },
                "fileExtension": {
                    "type": "string",
                    "description": "Specifies the extension for files unloaded to a stage.\n"
                },
                "formatType": {
                    "type": "string",
                    "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n"
                },
                "ignoreUtf8Errors": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                },
                "nullIfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "String used to convert to and from SQL NULL.\n"
                },
                "preserveSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                },
                "recordDelimiter": {
                    "type": "string",
                    "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                },
                "replaceInvalidCharacters": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the file format.\n"
                },
                "skipBlankLines": {
                    "type": "boolean",
                    "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                },
                "skipByteOrderMark": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                },
                "skipHeader": {
                    "type": "integer",
                    "description": "Number of lines at the start of the file to skip.\n"
                },
                "stripNullValues": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                },
                "stripOuterArray": {
                    "type": "boolean",
                    "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                },
                "stripOuterElement": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                },
                "timeFormat": {
                    "type": "string",
                    "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                },
                "trimSpace": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to remove white space from fields.\n"
                },
                "validateUtf8": {
                    "type": "boolean",
                    "description": "Boolean that specifies whether to validate UTF-8 character encoding in string column data.\n"
                }
            },
            "requiredInputs": [
                "database",
                "formatType",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FileFormat resources.\n",
                "properties": {
                    "allowDuplicate": {
                        "type": "boolean",
                        "description": "Boolean that specifies to allow duplicate object field names (only the last one will be preserved).\n"
                    },
                    "binaryAsText": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.\n"
                    },
                    "binaryFormat": {
                        "type": "string",
                        "description": "Defines the encoding format for binary input or output.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the file format.\n"
                    },
                    "compression": {
                        "type": "string",
                        "description": "Specifies the current compression algorithm for the data file.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the file format.\n"
                    },
                    "dateFormat": {
                        "type": "string",
                        "description": "Defines the format of date values in the data files (data loading) or table (data unloading).\n"
                    },
                    "disableAutoConvert": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.\n"
                    },
                    "disableSnowflakeData": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.\n"
                    },
                    "emptyFieldAsNull": {
                        "type": "boolean",
                        "description": "Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.\n"
                    },
                    "enableOctal": {
                        "type": "boolean",
                        "description": "Boolean that enables parsing of octal numbers.\n"
                    },
                    "encoding": {
                        "type": "string",
                        "description": "String (constant) that specifies the character set of the source data when loading data into a table.\n"
                    },
                    "errorOnColumnCountMismatch": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.\n"
                    },
                    "escape": {
                        "type": "string",
                        "description": "Single character string used as the escape character for field values.\n"
                    },
                    "escapeUnenclosedField": {
                        "type": "string",
                        "description": "Single character string used as the escape character for unenclosed field values only.\n"
                    },
                    "fieldDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).\n"
                    },
                    "fieldOptionallyEnclosedBy": {
                        "type": "string",
                        "description": "Character used to enclose strings.\n"
                    },
                    "fileExtension": {
                        "type": "string",
                        "description": "Specifies the extension for files unloaded to a stage.\n"
                    },
                    "formatType": {
                        "type": "string",
                        "description": "Specifies the format of the input files (for data loading) or output files (for data unloading).\n"
                    },
                    "ignoreUtf8Errors": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether UTF-8 encoding errors produce error conditions.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.\n"
                    },
                    "nullIfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "String used to convert to and from SQL NULL.\n"
                    },
                    "preserveSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.\n"
                    },
                    "recordDelimiter": {
                        "type": "string",
                        "description": "Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).\n"
                    },
                    "replaceInvalidCharacters": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the file format.\n"
                    },
                    "skipBlankLines": {
                        "type": "boolean",
                        "description": "Boolean that specifies to skip any blank lines encountered in the data files.\n"
                    },
                    "skipByteOrderMark": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.\n"
                    },
                    "skipHeader": {
                        "type": "integer",
                        "description": "Number of lines at the start of the file to skip.\n"
                    },
                    "stripNullValues": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove object fields or array elements containing null values.\n"
                    },
                    "stripOuterArray": {
                        "type": "boolean",
                        "description": "Boolean that instructs the JSON parser to remove outer brackets.\n"
                    },
                    "stripOuterElement": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.\n"
                    },
                    "timeFormat": {
                        "type": "string",
                        "description": "Defines the format of time values in the data files (data loading) or table (data unloading).\n"
                    },
                    "timestampFormat": {
                        "type": "string",
                        "description": "Defines the format of timestamp values in the data files (data loading) or table (data unloading).\n"
                    },
                    "trimSpace": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to remove white space from fields.\n"
                    },
                    "validateUtf8": {
                        "type": "boolean",
                        "description": "Boolean that specifies whether to validate UTF-8 character encoding in string column data.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/fileFormatGrant:FileFormatGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.FileFormatGrant(\"grant\", {\n    databaseName: \"db\",\n    fileFormatName: \"file_format\",\n    onFuture: false,\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.FileFormatGrant(\"grant\",\n    database_name=\"db\",\n    file_format_name=\"file_format\",\n    on_future=False,\n    privilege=\"select\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.FileFormatGrant(\"grant\", new Snowflake.FileFormatGrantArgs\n        {\n            DatabaseName = \"db\",\n            FileFormatName = \"file_format\",\n            OnFuture = false,\n            Privilege = \"select\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewFileFormatGrant(ctx, \"grant\", \u0026snowflake.FileFormatGrantArgs{\n\t\t\tDatabaseName:   pulumi.String(\"db\"),\n\t\t\tFileFormatName: pulumi.String(\"file_format\"),\n\t\t\tOnFuture:       pulumi.Bool(false),\n\t\t\tPrivilege:      pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName:      pulumi.String(\"schema\"),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | file format name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/fileFormatGrant:FileFormatGrant example 'dbName|schemaName|fileFormatName|USAGE|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future file formats on which to grant privileges.\n"
                },
                "fileFormatName": {
                    "type": "string",
                    "description": "The name of the file format on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future file formats in the given schema. When this is true and no schema*name is provided apply this grant on all future file formats in the given database. The file*format*name field must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future file format.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future file formats on which to grant privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future file formats on which to grant privileges.\n"
                },
                "fileFormatName": {
                    "type": "string",
                    "description": "The name of the file format on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future file formats in the given schema. When this is true and no schema*name is provided apply this grant on all future file formats in the given database. The file*format*name field must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future file format.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future file formats on which to grant privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FileFormatGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future file formats on which to grant privileges.\n"
                    },
                    "fileFormatName": {
                        "type": "string",
                        "description": "The name of the file format on which to grant privileges immediately (only valid if on_future is false).\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future file formats in the given schema. When this is true and no schema*name is provided apply this grant on all future file formats in the given database. The file*format*name field must be unset in order to use on_future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future file format.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future file formats on which to grant privileges.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/functionGrant:FunctionGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.FunctionGrant(\"grant\", {\n    databaseName: \"db\",\n    schemaName: \"schema\",\n    functionName: \"function\",\n    arguments: [\n        {\n            name: \"a\",\n            type: \"array\",\n        },\n        {\n            name: \"b\",\n            type: \"string\",\n        },\n    ],\n    returnType: \"string\",\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    onFuture: false,\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.FunctionGrant(\"grant\",\n    database_name=\"db\",\n    schema_name=\"schema\",\n    function_name=\"function\",\n    arguments=[\n        snowflake.FunctionGrantArgumentArgs(\n            %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n            snowflake.FunctionGrantArgumentArgs(\n                %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n            ],\n            return_type=\"string\",\n            privilege=\"select\",\n            roles=[\n                \"role1\",\n                \"role2\",\n            ],\n            shares=[\n                \"share1\",\n                \"share2\",\n            ],\n            on_future=False,\n            with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.FunctionGrant(\"grant\", new Snowflake.FunctionGrantArgs\n        {\n            DatabaseName = \"db\",\n            SchemaName = \"schema\",\n            FunctionName = \"function\",\n            Arguments = \n            {\n                new Snowflake.Inputs.FunctionGrantArgumentArgs\n                {\n                    %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n                    new Snowflake.Inputs.FunctionGrantArgumentArgs\n                    {\n                        %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n                    },\n                    ReturnType = \"string\",\n                    Privilege = \"select\",\n                    Roles = \n                    {\n                        \"role1\",\n                        \"role2\",\n                    },\n                    Shares = \n                    {\n                        \"share1\",\n                        \"share2\",\n                    },\n                    OnFuture = false,\n                    WithGrantOption = false,\n                });\n            }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewFunctionGrant(ctx, \"grant\", \u0026snowflake.FunctionGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"db\"),\n\t\t\tSchemaName:   pulumi.String(\"schema\"),\n\t\t\tFunctionName: pulumi.String(\"function\"),\n\t\t\tArguments: FunctionGrantArgumentArray{\n\t\t\t\t\u0026FunctionGrantArgumentArgs{\n\t\t\t\t\tName: pulumi.String(\"a\"),\n\t\t\t\t\tType: pulumi.String(\"array\"),\n\t\t\t\t},\n\t\t\t\t\u0026FunctionGrantArgumentArgs{\n\t\t\t\t\tName: pulumi.String(\"b\"),\n\t\t\t\t\tType: pulumi.String(\"string\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tReturnType: pulumi.String(\"string\"),\n\t\t\tPrivilege:  pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tOnFuture:        pulumi.Bool(false),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | function signature | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/functionGrant:FunctionGrant example 'dbName|schemaName|functionName(ARG1 ARG1TYPE, ARG2 ARG2TYPE):RETURNTYPE|USAGE|false'\n```\n\n ",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionGrantArgument:FunctionGrantArgument"
                    },
                    "description": "List of the arguments for the function (must be present if function_name is present)\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future functions on which to grant privileges.\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "The name of the function on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future functions in the given schema. When this is true and no schema*name is provided apply this grant on all future functions in the given database. The function*name, arguments, return*type, and shares fields must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future function.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the function (must be present if function_name is present)\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future functions on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/FunctionGrantArgument:FunctionGrantArgument"
                    },
                    "description": "List of the arguments for the function (must be present if function_name is present)\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future functions on which to grant privileges.\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "The name of the function on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future functions in the given schema. When this is true and no schema*name is provided apply this grant on all future functions in the given database. The function*name, arguments, return*type, and shares fields must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future function.\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the function (must be present if function_name is present)\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future functions on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionGrant resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/FunctionGrantArgument:FunctionGrantArgument"
                        },
                        "description": "List of the arguments for the function (must be present if function_name is present)\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future functions on which to grant privileges.\n"
                    },
                    "functionName": {
                        "type": "string",
                        "description": "The name of the function on which to grant privileges immediately (only valid if on_future is false).\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future functions in the given schema. When this is true and no schema*name is provided apply this grant on all future functions in the given database. The function*name, arguments, return*type, and shares fields must be unset in order to use on_future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future function.\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "The return type of the function (must be present if function_name is present)\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future functions on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/integrationGrant:IntegrationGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.IntegrationGrant(\"grant\", {\n    integrationName: \"integration\",\n    privilege: \"USAGE\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.IntegrationGrant(\"grant\",\n    integration_name=\"integration\",\n    privilege=\"USAGE\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.IntegrationGrant(\"grant\", new Snowflake.IntegrationGrantArgs\n        {\n            IntegrationName = \"integration\",\n            Privilege = \"USAGE\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewIntegrationGrant(ctx, \"grant\", \u0026snowflake.IntegrationGrantArgs{\n\t\t\tIntegrationName: pulumi.String(\"integration\"),\n\t\t\tPrivilege:       pulumi.String(\"USAGE\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is integration name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/integrationGrant:IntegrationGrant example 'intName|USAGE|true'\n```\n\n ",
            "properties": {
                "integrationName": {
                    "type": "string",
                    "description": "Identifier for the integration; must be unique for your account.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the integration.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "integrationName"
            ],
            "inputProperties": {
                "integrationName": {
                    "type": "string",
                    "description": "Identifier for the integration; must be unique for your account.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the integration.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "integrationName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IntegrationGrant resources.\n",
                "properties": {
                    "integrationName": {
                        "type": "string",
                        "description": "Identifier for the integration; must be unique for your account.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the integration.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/managedAccount:ManagedAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst account = new snowflake.ManagedAccount(\"account\", {\n    adminName: \"admin\",\n    adminPassword: \"secret\",\n    cloud: \"aws\",\n    comment: \"A managed account.\",\n    locator: \"managed-account\",\n    region: \"us-west-2\",\n    type: \"READER\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/managedAccount:ManagedAccount example name\n```\n\n ",
            "properties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account.\n"
                },
                "cloud": {
                    "type": "string",
                    "description": "Cloud in which the managed account is located.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the managed account was created.\n"
                },
                "locator": {
                    "type": "string",
                    "description": "Display name of the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Snowflake Region in which the managed account is located.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of managed account.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL for accessing the managed account, particularly through the web interface.\n"
                }
            },
            "required": [
                "adminName",
                "adminPassword",
                "cloud",
                "createdOn",
                "locator",
                "name",
                "region",
                "url"
            ],
            "inputProperties": {
                "adminName": {
                    "type": "string",
                    "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "Password for the initial user in the managed account.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the managed account; must be unique for your account.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of managed account.\n"
                }
            },
            "requiredInputs": [
                "adminName",
                "adminPassword"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedAccount resources.\n",
                "properties": {
                    "adminName": {
                        "type": "string",
                        "description": "Identifier, as well as login name, for the initial user in the managed account. This user serves as the account administrator for the account.\n"
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "Password for the initial user in the managed account.\n"
                    },
                    "cloud": {
                        "type": "string",
                        "description": "Cloud in which the managed account is located.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the managed account was created.\n"
                    },
                    "locator": {
                        "type": "string",
                        "description": "Display name of the managed account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the managed account; must be unique for your account.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Snowflake Region in which the managed account is located.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of managed account.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL for accessing the managed account, particularly through the web interface.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/maskingPolicy:MaskingPolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst exampleMaskingPolicy = new snowflake.MaskingPolicy(\"example_masking_policy\", {\n    database: \"EXAMPLE_DB\",\n    maskingExpression: \"case when current_role() in ('ANALYST') then val else sha2(val, 512) end\",\n    returnDataType: \"string\",\n    schema: \"EXAMPLE_SCHEMA\",\n    valueDataType: \"string\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nexample_masking_policy = snowflake.MaskingPolicy(\"exampleMaskingPolicy\",\n    database=\"EXAMPLE_DB\",\n    masking_expression=\"case when current_role() in ('ANALYST') then val else sha2(val, 512) end\",\n    return_data_type=\"string\",\n    schema=\"EXAMPLE_SCHEMA\",\n    value_data_type=\"string\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleMaskingPolicy = new Snowflake.MaskingPolicy(\"exampleMaskingPolicy\", new Snowflake.MaskingPolicyArgs\n        {\n            Database = \"EXAMPLE_DB\",\n            MaskingExpression = \"case when current_role() in ('ANALYST') then val else sha2(val, 512) end\",\n            ReturnDataType = \"string\",\n            Schema = \"EXAMPLE_SCHEMA\",\n            ValueDataType = \"string\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewMaskingPolicy(ctx, \"exampleMaskingPolicy\", \u0026snowflake.MaskingPolicyArgs{\n\t\t\tDatabase:          pulumi.String(\"EXAMPLE_DB\"),\n\t\t\tMaskingExpression: pulumi.String(\"case when current_role() in ('ANALYST') then val else sha2(val, 512) end\"),\n\t\t\tReturnDataType:    pulumi.String(\"string\"),\n\t\t\tSchema:            pulumi.String(\"EXAMPLE_SCHEMA\"),\n\t\t\tValueDataType:     pulumi.String(\"string\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | policy name\n\n```sh\n $ pulumi import snowflake:index/maskingPolicy:MaskingPolicy example 'dbName|schemaName|policyName'\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy.\n"
                },
                "maskingExpression": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "Specifies the data type to return.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy.\n"
                },
                "valueDataType": {
                    "type": "string",
                    "description": "Specifies the data type to mask.\n"
                }
            },
            "required": [
                "database",
                "maskingExpression",
                "name",
                "returnDataType",
                "schema",
                "valueDataType"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the masking policy.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the masking policy.\n"
                },
                "maskingExpression": {
                    "type": "string",
                    "description": "Specifies the SQL expression that transforms the data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.\n"
                },
                "returnDataType": {
                    "type": "string",
                    "description": "Specifies the data type to return.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the masking policy.\n"
                },
                "valueDataType": {
                    "type": "string",
                    "description": "Specifies the data type to mask.\n"
                }
            },
            "requiredInputs": [
                "database",
                "maskingExpression",
                "returnDataType",
                "schema",
                "valueDataType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaskingPolicy resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the masking policy.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the masking policy.\n"
                    },
                    "maskingExpression": {
                        "type": "string",
                        "description": "Specifies the SQL expression that transforms the data.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created.\n"
                    },
                    "returnDataType": {
                        "type": "string",
                        "description": "Specifies the data type to return.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the masking policy.\n"
                    },
                    "valueDataType": {
                        "type": "string",
                        "description": "Specifies the data type to mask.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/maskingPolicyGrant:MaskingPolicyGrant": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the masking policy on which to grant privileges.\n"
                },
                "maskingPolicyName": {
                    "type": "string",
                    "description": "The name of the masking policy on which to grant privileges immediately.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the masking policy.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the masking policy on which to grant privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "maskingPolicyName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the masking policy on which to grant privileges.\n"
                },
                "maskingPolicyName": {
                    "type": "string",
                    "description": "The name of the masking policy on which to grant privileges immediately.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the masking policy.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the masking policy on which to grant privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "maskingPolicyName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaskingPolicyGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the masking policy on which to grant privileges.\n"
                    },
                    "maskingPolicyName": {
                        "type": "string",
                        "description": "The name of the masking policy on which to grant privileges immediately.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the masking policy.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the masking policy on which to grant privileges.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/materializedView:MaterializedView": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst view = new snowflake.MaterializedView(\"view\", {\n    database: \"db\",\n    schema: \"schema\",\n    warehouse: \"warehouse\",\n    comment: \"comment\",\n    statement: \"select * from foo;\\n\",\n    orReplace: false,\n    isSecure: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nview = snowflake.MaterializedView(\"view\",\n    database=\"db\",\n    schema=\"schema\",\n    warehouse=\"warehouse\",\n    comment=\"comment\",\n    statement=\"select * from foo;\\n\",\n    or_replace=False,\n    is_secure=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var view = new Snowflake.MaterializedView(\"view\", new Snowflake.MaterializedViewArgs\n        {\n            Database = \"db\",\n            Schema = \"schema\",\n            Warehouse = \"warehouse\",\n            Comment = \"comment\",\n            Statement = @\"select * from foo;\n\",\n            OrReplace = false,\n            IsSecure = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewMaterializedView(ctx, \"view\", \u0026snowflake.MaterializedViewArgs{\n\t\t\tDatabase:  pulumi.String(\"db\"),\n\t\t\tSchema:    pulumi.String(\"schema\"),\n\t\t\tWarehouse: pulumi.String(\"warehouse\"),\n\t\t\tComment:   pulumi.String(\"comment\"),\n\t\t\tStatement: pulumi.String(\"select * from foo;\\n\"),\n\t\t\tOrReplace: pulumi.Bool(false),\n\t\t\tIsSecure:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | view name\n\n```sh\n $ pulumi import snowflake:index/materializedView:MaterializedView example 'dbName|schemaName|viewName'\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n"
                }
            },
            "required": [
                "database",
                "name",
                "schema",
                "statement",
                "warehouse"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse name.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaterializedView resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Don't use the | character.\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "Specifies that the view is secure.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Overwrites the View if it exists.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Don't use the | character.\n"
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view.\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse name.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/materializedViewGrant:MaterializedViewGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.MaterializedViewGrant(\"grant\", {\n    databaseName: \"db\",\n    materializedViewName: \"materialized_view\",\n    onFuture: false,\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.MaterializedViewGrant(\"grant\",\n    database_name=\"db\",\n    materialized_view_name=\"materialized_view\",\n    on_future=False,\n    privilege=\"select\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    shares=[\n        \"share1\",\n        \"share2\",\n    ],\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.MaterializedViewGrant(\"grant\", new Snowflake.MaterializedViewGrantArgs\n        {\n            DatabaseName = \"db\",\n            MaterializedViewName = \"materialized_view\",\n            OnFuture = false,\n            Privilege = \"select\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            Shares = \n            {\n                \"share1\",\n                \"share2\",\n            },\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewMaterializedViewGrant(ctx, \"grant\", \u0026snowflake.MaterializedViewGrantArgs{\n\t\t\tDatabaseName:         pulumi.String(\"db\"),\n\t\t\tMaterializedViewName: pulumi.String(\"materialized_view\"),\n\t\t\tOnFuture:             pulumi.Bool(false),\n\t\t\tPrivilege:            pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | materialized view name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/materializedViewGrant:MaterializedViewGrant example 'dbName|schemaName|materializedViewName|SELECT|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future materialized views on which to grant privileges.\n"
                },
                "materializedViewName": {
                    "type": "string",
                    "description": "The name of the materialized view on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future materialized views in the given schema. When this is true and no schema*name is provided apply this grant on all future materialized views in the given database. The materialized*view*name and shares fields must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future materialized view view.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future materialized views on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future materialized views on which to grant privileges.\n"
                },
                "materializedViewName": {
                    "type": "string",
                    "description": "The name of the materialized view on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future materialized views in the given schema. When this is true and no schema*name is provided apply this grant on all future materialized views in the given database. The materialized*view*name and shares fields must be unset in order to use on_future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future materialized view view.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future materialized views on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaterializedViewGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future materialized views on which to grant privileges.\n"
                    },
                    "materializedViewName": {
                        "type": "string",
                        "description": "The name of the materialized view on which to grant privileges immediately (only valid if on_future is false).\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future materialized views in the given schema. When this is true and no schema*name is provided apply this grant on all future materialized views in the given database. The materialized*view*name and shares fields must be unset in order to use on_future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future materialized view view.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future materialized views on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicy:NetworkPolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst policy = new snowflake.NetworkPolicy(\"policy\", {\n    allowedIpLists: [\"192.168.0.100/24\"],\n    blockedIpLists: [\"192.168.0.101\"],\n    comment: \"A policy.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\npolicy = snowflake.NetworkPolicy(\"policy\",\n    allowed_ip_lists=[\"192.168.0.100/24\"],\n    blocked_ip_lists=[\"192.168.0.101\"],\n    comment=\"A policy.\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var policy = new Snowflake.NetworkPolicy(\"policy\", new Snowflake.NetworkPolicyArgs\n        {\n            AllowedIpLists = \n            {\n                \"192.168.0.100/24\",\n            },\n            BlockedIpLists = \n            {\n                \"192.168.0.101\",\n            },\n            Comment = \"A policy.\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewNetworkPolicy(ctx, \"policy\", \u0026snowflake.NetworkPolicyArgs{\n\t\t\tAllowedIpLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.100/24\"),\n\t\t\t},\n\t\t\tBlockedIpLists: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.0.101\"),\n\t\t\t},\n\t\t\tComment: pulumi.String(\"A policy.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/networkPolicy:NetworkPolicy example policyname\n```\n\n ",
            "properties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account\\n\\n\\n\\n**Do not** add `0.0.0.0/0` to `blocked_ip_list`\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                }
            },
            "required": [
                "allowedIpLists",
                "name"
            ],
            "inputProperties": {
                "allowedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account\n"
                },
                "blockedIpLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account\\n\\n\\n\\n**Do not** add `0.0.0.0/0` to `blocked_ip_list`\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the network policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                }
            },
            "requiredInputs": [
                "allowedIpLists"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicy resources.\n",
                "properties": {
                    "allowedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account\n"
                    },
                    "blockedIpLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account\\n\\n\\n\\n**Do not** add `0.0.0.0/0` to `blocked_ip_list`\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the network policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst attach = new snowflake.NetworkPolicyAttachment(\"attach\", {\n    networkPolicyName: \"policy\",\n    setForAccount: false,\n    users: [\n        \"user1\",\n        \"user2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nattach = snowflake.NetworkPolicyAttachment(\"attach\",\n    network_policy_name=\"policy\",\n    set_for_account=False,\n    users=[\n        \"user1\",\n        \"user2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var attach = new Snowflake.NetworkPolicyAttachment(\"attach\", new Snowflake.NetworkPolicyAttachmentArgs\n        {\n            NetworkPolicyName = \"policy\",\n            SetForAccount = false,\n            Users = \n            {\n                \"user1\",\n                \"user2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewNetworkPolicyAttachment(ctx, \"attach\", \u0026snowflake.NetworkPolicyAttachmentArgs{\n\t\t\tNetworkPolicyName: pulumi.String(\"policy\"),\n\t\t\tSetForAccount:     pulumi.Bool(false),\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1\"),\n\t\t\t\tpulumi.String(\"user2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/networkPolicyAttachment:NetworkPolicyAttachment example attachment_policyname\n```\n\n ",
            "properties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                },
                "setForAccount": {
                    "type": "boolean",
                    "description": "Specifies whether the network policy should be applied globally to your Snowflake account\u003cbr\u003e\u003cbr\u003e**Note:** The Snowflake\nuser running `terraform apply` must be on an IP address allowed by the network policy to set that policy globally on the\nSnowflake account.\u003cbr\u003e\u003cbr\u003eAdditionally, a Snowflake account can only have one network policy set globally at any given\ntime. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If\nmultiple network policy resources have `set_for_account: true`, the final policy set on the account will be\nnon-deterministic.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "required": [
                "networkPolicyName"
            ],
            "inputProperties": {
                "networkPolicyName": {
                    "type": "string",
                    "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                },
                "setForAccount": {
                    "type": "boolean",
                    "description": "Specifies whether the network policy should be applied globally to your Snowflake account\u003cbr\u003e\u003cbr\u003e**Note:** The Snowflake\nuser running `terraform apply` must be on an IP address allowed by the network policy to set that policy globally on the\nSnowflake account.\u003cbr\u003e\u003cbr\u003eAdditionally, a Snowflake account can only have one network policy set globally at any given\ntime. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If\nmultiple network policy resources have `set_for_account: true`, the final policy set on the account will be\nnon-deterministic.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which users the network policy should be attached to\n"
                }
            },
            "requiredInputs": [
                "networkPolicyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPolicyAttachment resources.\n",
                "properties": {
                    "networkPolicyName": {
                        "type": "string",
                        "description": "Specifies the identifier for the network policy; must be unique for the account in which the network policy is created.\n"
                    },
                    "setForAccount": {
                        "type": "boolean",
                        "description": "Specifies whether the network policy should be applied globally to your Snowflake account\u003cbr\u003e\u003cbr\u003e**Note:** The Snowflake\nuser running `terraform apply` must be on an IP address allowed by the network policy to set that policy globally on the\nSnowflake account.\u003cbr\u003e\u003cbr\u003eAdditionally, a Snowflake account can only have one network policy set globally at any given\ntime. This resource does not enforce one-policy-per-account, it is the user's responsibility to enforce this. If\nmultiple network policy resources have `set_for_account: true`, the final policy set on the account will be\nnon-deterministic.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which users the network policy should be attached to\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/notificationIntegration:NotificationIntegration": {
            "properties": {
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management\n"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the notification integration was created.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)\n"
                },
                "type": {
                    "type": "string",
                    "description": "A type of integration\n"
                }
            },
            "required": [
                "azureStorageQueuePrimaryUri",
                "azureTenantId",
                "createdOn",
                "name"
            ],
            "inputProperties": {
                "azureStorageQueuePrimaryUri": {
                    "type": "string",
                    "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "The ID of the Azure Active Directory tenant used for identity management\n"
                },
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "notificationProvider": {
                    "type": "string",
                    "description": "The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)\n"
                },
                "type": {
                    "type": "string",
                    "description": "A type of integration\n"
                }
            },
            "requiredInputs": [
                "azureStorageQueuePrimaryUri",
                "azureTenantId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationIntegration resources.\n",
                "properties": {
                    "azureStorageQueuePrimaryUri": {
                        "type": "string",
                        "description": "The queue ID for the Azure Queue Storage queue created for Event Grid notifications\n"
                    },
                    "azureTenantId": {
                        "type": "string",
                        "description": "The ID of the Azure Active Directory tenant used for identity management\n"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the notification integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notificationProvider": {
                        "type": "string",
                        "description": "The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "A type of integration\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/pipe:Pipe": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst pipe = new snowflake.Pipe(\"pipe\", {\n    autoIngest: false,\n    awsSnsTopicArn: \"...\",\n    comment: \"A pipe.\",\n    copyStatement: \"copy into mytable from @mystage\",\n    database: \"db\",\n    notificationChannel: \"...\",\n    owner: \"role1\",\n    schema: \"schema\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | pipe name\n\n```sh\n $ pulumi import snowflake:index/pipe:Pipe example 'dbName|schemaName|pipeName'\n```\n\n ",
            "properties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "Specifies a auto_ingest param for the pipe.\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n"
                },
                "notificationChannel": {
                    "type": "string",
                    "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the pipe.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n"
                }
            },
            "required": [
                "copyStatement",
                "database",
                "name",
                "notificationChannel",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "autoIngest": {
                    "type": "boolean",
                    "description": "Specifies a auto_ingest param for the pipe.\n"
                },
                "awsSnsTopicArn": {
                    "type": "string",
                    "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the pipe.\n"
                },
                "copyStatement": {
                    "type": "string",
                    "description": "Specifies the copy statement for the pipe.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the pipe.\n"
                },
                "integration": {
                    "type": "string",
                    "description": "Specifies an integration for the pipe.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the pipe.\n"
                }
            },
            "requiredInputs": [
                "copyStatement",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipe resources.\n",
                "properties": {
                    "autoIngest": {
                        "type": "boolean",
                        "description": "Specifies a auto_ingest param for the pipe.\n"
                    },
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the pipe.\n"
                    },
                    "copyStatement": {
                        "type": "string",
                        "description": "Specifies the copy statement for the pipe.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the pipe.\n"
                    },
                    "integration": {
                        "type": "string",
                        "description": "Specifies an integration for the pipe.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.\n"
                    },
                    "notificationChannel": {
                        "type": "string",
                        "description": "Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the pipe.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the pipe.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/procedureGrant:ProcedureGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.ProcedureGrant(\"grant\", {\n    databaseName: \"db\",\n    schemaName: \"schema\",\n    procedureName: \"procedure\",\n    arguments: [\n        {\n            name: \"a\",\n            type: \"array\",\n        },\n        {\n            name: \"b\",\n            type: \"string\",\n        },\n    ],\n    returnType: \"string\",\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    onFuture: false,\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.ProcedureGrant(\"grant\",\n    database_name=\"db\",\n    schema_name=\"schema\",\n    procedure_name=\"procedure\",\n    arguments=[\n        snowflake.ProcedureGrantArgumentArgs(\n            %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n            snowflake.ProcedureGrantArgumentArgs(\n                %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n            ],\n            return_type=\"string\",\n            privilege=\"select\",\n            roles=[\n                \"role1\",\n                \"role2\",\n            ],\n            shares=[\n                \"share1\",\n                \"share2\",\n            ],\n            on_future=False,\n            with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.ProcedureGrant(\"grant\", new Snowflake.ProcedureGrantArgs\n        {\n            DatabaseName = \"db\",\n            SchemaName = \"schema\",\n            ProcedureName = \"procedure\",\n            Arguments = \n            {\n                new Snowflake.Inputs.ProcedureGrantArgumentArgs\n                {\n                    %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n                    new Snowflake.Inputs.ProcedureGrantArgumentArgs\n                    {\n                        %!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression),\n                    },\n                    ReturnType = \"string\",\n                    Privilege = \"select\",\n                    Roles = \n                    {\n                        \"role1\",\n                        \"role2\",\n                    },\n                    Shares = \n                    {\n                        \"share1\",\n                        \"share2\",\n                    },\n                    OnFuture = false,\n                    WithGrantOption = false,\n                });\n            }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewProcedureGrant(ctx, \"grant\", \u0026snowflake.ProcedureGrantArgs{\n\t\t\tDatabaseName:  pulumi.String(\"db\"),\n\t\t\tSchemaName:    pulumi.String(\"schema\"),\n\t\t\tProcedureName: pulumi.String(\"procedure\"),\n\t\t\tArguments: ProcedureGrantArgumentArray{\n\t\t\t\t\u0026ProcedureGrantArgumentArgs{\n\t\t\t\t\tName: pulumi.String(\"a\"),\n\t\t\t\t\tType: pulumi.String(\"array\"),\n\t\t\t\t},\n\t\t\t\t\u0026ProcedureGrantArgumentArgs{\n\t\t\t\t\tName: pulumi.String(\"b\"),\n\t\t\t\t\tType: pulumi.String(\"string\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tReturnType: pulumi.String(\"string\"),\n\t\t\tPrivilege:  pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tOnFuture:        pulumi.Bool(false),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | procedure signature | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/procedureGrant:ProcedureGrant example 'dbName|schemaName|procedureName(ARG1 ARG1TYPE, ARG2 ARG2TYPE):RETURNTYPE|USAGE|false'\n```\n\n ",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureGrantArgument:ProcedureGrantArgument"
                    },
                    "description": "List of the arguments for the procedure (must be present if procedure_name is present)\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future procedures on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future procedures in the given schema. When this is true and no schema*name is provided apply this grant on all future procedures in the given database. The procedure*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future procedure.\n"
                },
                "procedureName": {
                    "type": "string",
                    "description": "The name of the procedure on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the procedure (must be present if procedure_name is present)\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future procedures on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/ProcedureGrantArgument:ProcedureGrantArgument"
                    },
                    "description": "List of the arguments for the procedure (must be present if procedure_name is present)\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future procedures on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future procedures in the given schema. When this is true and no schema*name is provided apply this grant on all future procedures in the given database. The procedure*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future procedure.\n"
                },
                "procedureName": {
                    "type": "string",
                    "description": "The name of the procedure on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "returnType": {
                    "type": "string",
                    "description": "The return type of the procedure (must be present if procedure_name is present)\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future procedures on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcedureGrant resources.\n",
                "properties": {
                    "arguments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/ProcedureGrantArgument:ProcedureGrantArgument"
                        },
                        "description": "List of the arguments for the procedure (must be present if procedure_name is present)\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future procedures on which to grant privileges.\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future procedures in the given schema. When this is true and no schema*name is provided apply this grant on all future procedures in the given database. The procedure*name and shares fields must be unset in order to use on*future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future procedure.\n"
                    },
                    "procedureName": {
                        "type": "string",
                        "description": "The name of the procedure on which to grant privileges immediately (only valid if on_future is false).\n"
                    },
                    "returnType": {
                        "type": "string",
                        "description": "The return type of the procedure (must be present if procedure_name is present)\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future procedures on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/resourceMonitor:ResourceMonitor": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst monitor = new snowflake.ResourceMonitor(\"monitor\", {\n    creditQuota: 100,\n    endTimestamp: \"2021-12-07 00:00\",\n    frequency: \"DAILY\",\n    notifyTriggers: [40],\n    startTimestamp: \"2020-12-07 00:00\",\n    suspendImmediateTriggers: [90],\n    suspendTriggers: [50],\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nmonitor = snowflake.ResourceMonitor(\"monitor\",\n    credit_quota=100,\n    end_timestamp=\"2021-12-07 00:00\",\n    frequency=\"DAILY\",\n    notify_triggers=[40],\n    start_timestamp=\"2020-12-07 00:00\",\n    suspend_immediate_triggers=[90],\n    suspend_triggers=[50])\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var monitor = new Snowflake.ResourceMonitor(\"monitor\", new Snowflake.ResourceMonitorArgs\n        {\n            CreditQuota = 100,\n            EndTimestamp = \"2021-12-07 00:00\",\n            Frequency = \"DAILY\",\n            NotifyTriggers = \n            {\n                40,\n            },\n            StartTimestamp = \"2020-12-07 00:00\",\n            SuspendImmediateTriggers = \n            {\n                90,\n            },\n            SuspendTriggers = \n            {\n                50,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewResourceMonitor(ctx, \"monitor\", \u0026snowflake.ResourceMonitorArgs{\n\t\t\tCreditQuota:  pulumi.Int(100),\n\t\t\tEndTimestamp: pulumi.String(\"2021-12-07 00:00\"),\n\t\t\tFrequency:    pulumi.String(\"DAILY\"),\n\t\t\tNotifyTriggers: pulumi.IntArray{\n\t\t\t\tpulumi.Int(40),\n\t\t\t},\n\t\t\tStartTimestamp: pulumi.String(\"2020-12-07 00:00\"),\n\t\t\tSuspendImmediateTriggers: pulumi.IntArray{\n\t\t\t\tpulumi.Int(90),\n\t\t\t},\n\t\t\tSuspendTriggers: pulumi.IntArray{\n\t\t\t\tpulumi.Int(50),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/resourceMonitor:ResourceMonitor example\n```\n\n ",
            "properties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated monthly to the resource monitor.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account.\n"
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of percentage thresholds at which to send an alert to subscribed users.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.\n"
                },
                "suspendImmediateTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of percentage thresholds at which to immediately suspend all warehouses.\n"
                },
                "suspendTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of percentage thresholds at which to suspend all warehouses.\n"
                }
            },
            "required": [
                "creditQuota",
                "frequency",
                "name",
                "startTimestamp"
            ],
            "inputProperties": {
                "creditQuota": {
                    "type": "integer",
                    "description": "The number of credits allocated monthly to the resource monitor.\n"
                },
                "endTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account.\n"
                },
                "notifyTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of percentage thresholds at which to send an alert to subscribed users.\n"
                },
                "startTimestamp": {
                    "type": "string",
                    "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.\n"
                },
                "suspendImmediateTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of percentage thresholds at which to immediately suspend all warehouses.\n"
                },
                "suspendTriggers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of percentage thresholds at which to suspend all warehouses.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceMonitor resources.\n",
                "properties": {
                    "creditQuota": {
                        "type": "integer",
                        "description": "The number of credits allocated monthly to the resource monitor.\n"
                    },
                    "endTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor suspends the assigned warehouses.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the resource monitor; must be unique for your account.\n"
                    },
                    "notifyTriggers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of percentage thresholds at which to send an alert to subscribed users.\n"
                    },
                    "startTimestamp": {
                        "type": "string",
                        "description": "The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.\n"
                    },
                    "suspendImmediateTriggers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of percentage thresholds at which to immediately suspend all warehouses.\n"
                    },
                    "suspendTriggers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of percentage thresholds at which to suspend all warehouses.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/resourceMonitorGrant:ResourceMonitorGrant": {
            "description": "\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/resourceMonitorGrant:ResourceMonitorGrant example name\n```\n\n ",
            "properties": {
                "monitorName": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the resource monitor.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "monitorName"
            ],
            "inputProperties": {
                "monitorName": {
                    "type": "string",
                    "description": "Identifier for the resource monitor; must be unique for your account.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the resource monitor.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "monitorName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceMonitorGrant resources.\n",
                "properties": {
                    "monitorName": {
                        "type": "string",
                        "description": "Identifier for the resource monitor; must be unique for your account.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the resource monitor.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/role:Role": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst role = new snowflake.Role(\"role\", {\n    comment: \"A role.\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nrole = snowflake.Role(\"role\", comment=\"A role.\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var role = new Snowflake.Role(\"role\", new Snowflake.RoleArgs\n        {\n            Comment = \"A role.\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewRole(ctx, \"role\", \u0026snowflake.RoleArgs{\n\t\t\tComment: pulumi.String(\"A role.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/role:Role example roleName\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/roleGrants:RoleGrants": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst role = new snowflake.Role(\"role\", {\n    comment: \"for testing\",\n});\nconst user = new snowflake.User(\"user\", {\n    comment: \"for testing\",\n});\nconst user2 = new snowflake.User(\"user2\", {\n    comment: \"for testing\",\n});\nconst otherRole = new snowflake.Role(\"other_role\", {});\nconst grants = new snowflake.RoleGrants(\"grants\", {\n    roleName: role.name,\n    roles: [otherRole.name],\n    users: [\n        user.name,\n        user2.name,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nrole = snowflake.Role(\"role\", comment=\"for testing\")\nuser = snowflake.User(\"user\", comment=\"for testing\")\nuser2 = snowflake.User(\"user2\", comment=\"for testing\")\nother_role = snowflake.Role(\"otherRole\")\ngrants = snowflake.RoleGrants(\"grants\",\n    role_name=role.name,\n    roles=[other_role.name],\n    users=[\n        user.name,\n        user2.name,\n    ])\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var role = new Snowflake.Role(\"role\", new Snowflake.RoleArgs\n        {\n            Comment = \"for testing\",\n        });\n        var user = new Snowflake.User(\"user\", new Snowflake.UserArgs\n        {\n            Comment = \"for testing\",\n        });\n        var user2 = new Snowflake.User(\"user2\", new Snowflake.UserArgs\n        {\n            Comment = \"for testing\",\n        });\n        var otherRole = new Snowflake.Role(\"otherRole\", new Snowflake.RoleArgs\n        {\n        });\n        var grants = new Snowflake.RoleGrants(\"grants\", new Snowflake.RoleGrantsArgs\n        {\n            RoleName = role.Name,\n            Roles = \n            {\n                otherRole.Name,\n            },\n            Users = \n            {\n                user.Name,\n                user2.Name,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trole, err := snowflake.NewRole(ctx, \"role\", \u0026snowflake.RoleArgs{\n\t\t\tComment: pulumi.String(\"for testing\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := snowflake.NewUser(ctx, \"user\", \u0026snowflake.UserArgs{\n\t\t\tComment: pulumi.String(\"for testing\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser2, err := snowflake.NewUser(ctx, \"user2\", \u0026snowflake.UserArgs{\n\t\t\tComment: pulumi.String(\"for testing\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\totherRole, err := snowflake.NewRole(ctx, \"otherRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = snowflake.NewRoleGrants(ctx, \"grants\", \u0026snowflake.RoleGrantsArgs{\n\t\t\tRoleName: role.Name,\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\totherRole.Name,\n\t\t\t},\n\t\t\tUsers: pulumi.StringArray{\n\t\t\t\tuser.Name,\n\t\t\t\tuser2.Name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/roleGrants:RoleGrants example rolename\n```\n\n ",
            "properties": {
                "roleName": {
                    "type": "string",
                    "description": "The name of the role we are granting.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants role to this specified role.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants role to this specified user.\n"
                }
            },
            "required": [
                "roleName"
            ],
            "inputProperties": {
                "roleName": {
                    "type": "string",
                    "description": "The name of the role we are granting.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants role to this specified role.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants role to this specified user.\n"
                }
            },
            "requiredInputs": [
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleGrants resources.\n",
                "properties": {
                    "roleName": {
                        "type": "string",
                        "description": "The name of the role we are granting.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants role to this specified role.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants role to this specified user.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/schema:Schema": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst schema = new snowflake.Schema(\"schema\", {\n    comment: \"A schema.\",\n    dataRetentionDays: 1,\n    database: \"db\",\n    isManaged: false,\n    isTransient: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nschema = snowflake.Schema(\"schema\",\n    comment=\"A schema.\",\n    data_retention_days=1,\n    database=\"db\",\n    is_managed=False,\n    is_transient=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var schema = new Snowflake.Schema(\"schema\", new Snowflake.SchemaArgs\n        {\n            Comment = \"A schema.\",\n            DataRetentionDays = 1,\n            Database = \"db\",\n            IsManaged = false,\n            IsTransient = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewSchema(ctx, \"schema\", \u0026snowflake.SchemaArgs{\n\t\t\tComment:           pulumi.String(\"A schema.\"),\n\t\t\tDataRetentionDays: pulumi.Int(1),\n\t\t\tDatabase:          pulumi.String(\"db\"),\n\t\t\tIsManaged:         pulumi.Bool(false),\n\t\t\tIsTransient:       pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is dbName | schemaName\n\n```sh\n $ pulumi import snowflake:index/schema:Schema example 'dbName|schemaName'\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema.\n"
                },
                "isManaged": {
                    "type": "boolean",
                    "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created.\n"
                }
            },
            "required": [
                "database",
                "name"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the schema.\n"
                },
                "dataRetentionDays": {
                    "type": "integer",
                    "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the schema.\n"
                },
                "isManaged": {
                    "type": "boolean",
                    "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.\n"
                },
                "isTransient": {
                    "type": "boolean",
                    "description": "Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created.\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schema resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the schema.\n"
                    },
                    "dataRetentionDays": {
                        "type": "integer",
                        "description": "Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the schema, as well as specifying the default Time Travel retention time for all tables created in the schema.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the schema.\n"
                    },
                    "isManaged": {
                        "type": "boolean",
                        "description": "Specifies a managed schema. Managed access schemas centralize privilege management with the schema owner.\n"
                    },
                    "isTransient": {
                        "type": "boolean",
                        "description": "Specifies a schema as transient. Transient schemas do not have a Fail-safe period so they do not incur additional storage costs once they leave Time Travel; however, this means they are also not protected by Fail-safe in the event of a data loss.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the schema; must be unique for the database in which the schema is created.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/schemaGrant:SchemaGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.SchemaGrant(\"grant\", {\n    databaseName: \"db\",\n    onFuture: false,\n    privilege: \"USAGE\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.SchemaGrant(\"grant\",\n    database_name=\"db\",\n    on_future=False,\n    privilege=\"USAGE\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    shares=[\n        \"share1\",\n        \"share2\",\n    ],\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.SchemaGrant(\"grant\", new Snowflake.SchemaGrantArgs\n        {\n            DatabaseName = \"db\",\n            OnFuture = false,\n            Privilege = \"USAGE\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            Shares = \n            {\n                \"share1\",\n                \"share2\",\n            },\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewSchemaGrant(ctx, \"grant\", \u0026snowflake.SchemaGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"db\"),\n\t\t\tOnFuture:     pulumi.Bool(false),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/schemaGrant:SchemaGrant example 'databaseName|schemaName||MONITOR|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the schema on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true, apply this grant on all future schemas in the given database. The schema*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future schema. Note that if \"OWNERSHIP\" is specified, ensure that the role that\nterraform is using is granted access.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the schema on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true, apply this grant on all future schemas in the given database. The schema*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future schema. Note that if \"OWNERSHIP\" is specified, ensure that the role that\nterraform is using is granted access.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SchemaGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the schema on which to grant privileges.\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true, apply this grant on all future schemas in the given database. The schema*name and shares fields must be unset in order to use on*future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future schema. Note that if \"OWNERSHIP\" is specified, ensure that the role that\nterraform is using is granted access.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/scimIntegration:ScimIntegration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst aad = new snowflake.ScimIntegration(\"aad\", {\n    networkPolicy: \"AAD_NETWORK_POLICY\",\n    provisionerRole: \"AAD_PROVISIONER\",\n    scimClient: \"AZURE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\naad = snowflake.ScimIntegration(\"aad\",\n    network_policy=\"AAD_NETWORK_POLICY\",\n    provisioner_role=\"AAD_PROVISIONER\",\n    scim_client=\"AZURE\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var aad = new Snowflake.ScimIntegration(\"aad\", new Snowflake.ScimIntegrationArgs\n        {\n            NetworkPolicy = \"AAD_NETWORK_POLICY\",\n            ProvisionerRole = \"AAD_PROVISIONER\",\n            ScimClient = \"AZURE\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewScimIntegration(ctx, \"aad\", \u0026snowflake.ScimIntegrationArgs{\n\t\t\tNetworkPolicy:   pulumi.String(\"AAD_NETWORK_POLICY\"),\n\t\t\tProvisionerRole: pulumi.String(\"AAD_PROVISIONER\"),\n\t\t\tScimClient:      pulumi.String(\"AZURE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/scimIntegration:ScimIntegration example name\n```\n\n ",
            "properties": {
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the SCIM integration was created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SCIM integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy active for your account. The network policy restricts the list of user IP addresses when exchanging an authorization code for an access or refresh token and when using a refresh token to obtain a new access token. If this parameter is not set, the network policy for the account (if any) is used instead.\n"
                },
                "provisionerRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM.\n"
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration\n"
                }
            },
            "required": [
                "createdOn",
                "name",
                "provisionerRole",
                "scimClient"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the SCIM integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Specifies an existing network policy active for your account. The network policy restricts the list of user IP addresses when exchanging an authorization code for an access or refresh token and when using a refresh token to obtain a new access token. If this parameter is not set, the network policy for the account (if any) is used instead.\n"
                },
                "provisionerRole": {
                    "type": "string",
                    "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM.\n"
                },
                "scimClient": {
                    "type": "string",
                    "description": "Specifies the client type for the scim integration\n"
                }
            },
            "requiredInputs": [
                "provisionerRole",
                "scimClient"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScimIntegration resources.\n",
                "properties": {
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the SCIM integration was created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name of the SCIM integration. This name follows the rules for Object Identifiers. The name should be unique among security integrations in your account.\n"
                    },
                    "networkPolicy": {
                        "type": "string",
                        "description": "Specifies an existing network policy active for your account. The network policy restricts the list of user IP addresses when exchanging an authorization code for an access or refresh token and when using a refresh token to obtain a new access token. If this parameter is not set, the network policy for the account (if any) is used instead.\n"
                    },
                    "provisionerRole": {
                        "type": "string",
                        "description": "Specify the SCIM role in Snowflake that owns any users and roles that are imported from the identity provider into Snowflake using SCIM.\n"
                    },
                    "scimClient": {
                        "type": "string",
                        "description": "Specifies the client type for the scim integration\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sequence:Sequence": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst database = new snowflake.Database(\"database\", {});\nconst testSchema = new snowflake.Schema(\"testSchema\", {database: snowflake_database.test_database.name});\nconst testSequence = new snowflake.Sequence(\"testSequence\", {\n    database: snowflake_database.test_database.name,\n    schema: testSchema.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ndatabase = snowflake.Database(\"database\")\ntest_schema = snowflake.Schema(\"testSchema\", database=snowflake_database[\"test_database\"][\"name\"])\ntest_sequence = snowflake.Sequence(\"testSequence\",\n    database=snowflake_database[\"test_database\"][\"name\"],\n    schema=test_schema.name)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var database = new Snowflake.Database(\"database\", new Snowflake.DatabaseArgs\n        {\n        });\n        var testSchema = new Snowflake.Schema(\"testSchema\", new Snowflake.SchemaArgs\n        {\n            Database = snowflake_database.Test_database.Name,\n        });\n        var testSequence = new Snowflake.Sequence(\"testSequence\", new Snowflake.SequenceArgs\n        {\n            Database = snowflake_database.Test_database.Name,\n            Schema = testSchema.Name,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewDatabase(ctx, \"database\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestSchema, err := snowflake.NewSchema(ctx, \"testSchema\", \u0026snowflake.SchemaArgs{\n\t\t\tDatabase: pulumi.Any(snowflake_database.Test_database.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = snowflake.NewSequence(ctx, \"testSequence\", \u0026snowflake.SequenceArgs{\n\t\t\tDatabase: pulumi.Any(snowflake_database.Test_database.Name),\n\t\t\tSchema:   testSchema.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n"
                },
                "increment": {
                    "type": "integer",
                    "description": "The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n"
                },
                "nextValue": {
                    "type": "integer",
                    "description": "The next value the sequence will provide.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n"
                }
            },
            "required": [
                "database",
                "name",
                "nextValue",
                "schema"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the sequence.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the sequence. Don't use the | character.\n"
                },
                "increment": {
                    "type": "integer",
                    "description": "The amount the sequence will increase by each time it is used\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name for the sequence.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the sequence. Don't use the | character.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Sequence resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the sequence.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the sequence. Don't use the | character.\n"
                    },
                    "increment": {
                        "type": "integer",
                        "description": "The amount the sequence will increase by each time it is used\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the name for the sequence.\n"
                    },
                    "nextValue": {
                        "type": "integer",
                        "description": "The next value the sequence will provide.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the sequence. Don't use the | character.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/sequenceGrant:SequenceGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.SequenceGrant(\"grant\", {\n    databaseName: \"db\",\n    onFuture: false,\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    sequenceName: \"sequence\",\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.SequenceGrant(\"grant\",\n    database_name=\"db\",\n    on_future=False,\n    privilege=\"select\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    sequence_name=\"sequence\",\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.SequenceGrant(\"grant\", new Snowflake.SequenceGrantArgs\n        {\n            DatabaseName = \"db\",\n            OnFuture = false,\n            Privilege = \"select\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            SequenceName = \"sequence\",\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewSequenceGrant(ctx, \"grant\", \u0026snowflake.SequenceGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"db\"),\n\t\t\tOnFuture:     pulumi.Bool(false),\n\t\t\tPrivilege:    pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName:      pulumi.String(\"schema\"),\n\t\t\tSequenceName:    pulumi.String(\"sequence\"),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | sequence name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/sequenceGrant:SequenceGrant example 'dbName|schemaName|sequenceName|USAGE|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future sequences on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future sequences in the given schema. When this is true and no schema*name is provided apply this grant on all future sequences in the given database. The sequence*name field must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future sequence.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future sequences on which to grant privileges.\n"
                },
                "sequenceName": {
                    "type": "string",
                    "description": "The name of the sequence on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future sequences on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future sequences in the given schema. When this is true and no schema*name is provided apply this grant on all future sequences in the given database. The sequence*name field must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future sequence.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future sequences on which to grant privileges.\n"
                },
                "sequenceName": {
                    "type": "string",
                    "description": "The name of the sequence on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SequenceGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future sequences on which to grant privileges.\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future sequences in the given schema. When this is true and no schema*name is provided apply this grant on all future sequences in the given database. The sequence*name field must be unset in order to use on*future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future sequence.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future sequences on which to grant privileges.\n"
                    },
                    "sequenceName": {
                        "type": "string",
                        "description": "The name of the sequence on which to grant privileges immediately (only valid if on_future is false).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/share:Share": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst share = new snowflake.Share(\"share\", {\n    databaseName: \"db\",\n    privilege: \"USAGE\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    stageName: \"stage\",\n    withGrantOption: false,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/share:Share example name\n```\n\n ",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of accounts to be added to the share.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the managed account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Share resources.\n",
                "properties": {
                    "accounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of accounts to be added to the share.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the managed account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the share; must be unique for the account in which the share is created.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/stage:Stage": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst exampleStage = new snowflake.Stage(\"exampleStage\", {\n    url: \"s3://com.example.bucket/prefix\",\n    database: \"EXAMPLE_DB\",\n    schema: \"EXAMPLE_SCHEMA\",\n    credentials: `AWS_KEY_ID='${_var.example_aws_key_id}' AWS_SECRET_KEY='${_var.example_aws_secret_key}'`,\n});\nconst grantExampleStage = new snowflake.StageGrant(\"grantExampleStage\", {\n    databaseName: exampleStage.database,\n    schemaName: exampleStage.schema,\n    roles: [\"LOADER\"],\n    privilege: \"OWNERSHIP\",\n    stageName: exampleStage.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nexample_stage = snowflake.Stage(\"exampleStage\",\n    url=\"s3://com.example.bucket/prefix\",\n    database=\"EXAMPLE_DB\",\n    schema=\"EXAMPLE_SCHEMA\",\n    credentials=f\"AWS_KEY_ID='{var['example_aws_key_id']}' AWS_SECRET_KEY='{var['example_aws_secret_key']}'\")\ngrant_example_stage = snowflake.StageGrant(\"grantExampleStage\",\n    database_name=example_stage.database,\n    schema_name=example_stage.schema,\n    roles=[\"LOADER\"],\n    privilege=\"OWNERSHIP\",\n    stage_name=example_stage.name)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleStage = new Snowflake.Stage(\"exampleStage\", new Snowflake.StageArgs\n        {\n            Url = \"s3://com.example.bucket/prefix\",\n            Database = \"EXAMPLE_DB\",\n            Schema = \"EXAMPLE_SCHEMA\",\n            Credentials = $\"AWS_KEY_ID='{@var.Example_aws_key_id}' AWS_SECRET_KEY='{@var.Example_aws_secret_key}'\",\n        });\n        var grantExampleStage = new Snowflake.StageGrant(\"grantExampleStage\", new Snowflake.StageGrantArgs\n        {\n            DatabaseName = exampleStage.Database,\n            SchemaName = exampleStage.Schema,\n            Roles = \n            {\n                \"LOADER\",\n            },\n            Privilege = \"OWNERSHIP\",\n            StageName = exampleStage.Name,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleStage, err := snowflake.NewStage(ctx, \"exampleStage\", \u0026snowflake.StageArgs{\n\t\t\tUrl:         pulumi.String(\"s3://com.example.bucket/prefix\"),\n\t\t\tDatabase:    pulumi.String(\"EXAMPLE_DB\"),\n\t\t\tSchema:      pulumi.String(\"EXAMPLE_SCHEMA\"),\n\t\t\tCredentials: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v\", \"AWS_KEY_ID='\", _var.Example_aws_key_id, \"' AWS_SECRET_KEY='\", _var.Example_aws_secret_key, \"'\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = snowflake.NewStageGrant(ctx, \"grantExampleStage\", \u0026snowflake.StageGrantArgs{\n\t\t\tDatabaseName: exampleStage.Database,\n\t\t\tSchemaName:   exampleStage.Schema,\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"LOADER\"),\n\t\t\t},\n\t\t\tPrivilege: pulumi.String(\"OWNERSHIP\"),\n\t\t\tStageName: exampleStage.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | stage name\n\n```sh\n $ pulumi import snowflake:index/stage:Stage example 'dbName|schemaName|stageName'\n```\n\n ",
            "properties": {
                "awsExternalId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the stage.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n"
                },
                "snowflakeIamUser": {
                    "type": "string"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "required": [
                "awsExternalId",
                "database",
                "name",
                "schema",
                "snowflakeIamUser"
            ],
            "inputProperties": {
                "awsExternalId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stage.\n"
                },
                "copyOptions": {
                    "type": "string",
                    "description": "Specifies the copy options for the stage.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Specifies the credentials for the stage.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stage.\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "Specifies the encryption settings for the stage.\n"
                },
                "fileFormat": {
                    "type": "string",
                    "description": "Specifies the file format for the stage.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stage.\n"
                },
                "snowflakeIamUser": {
                    "type": "string"
                },
                "storageIntegration": {
                    "type": "string",
                    "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Specifies the URL for the stage.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Stage resources.\n",
                "properties": {
                    "awsExternalId": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stage.\n"
                    },
                    "copyOptions": {
                        "type": "string",
                        "description": "Specifies the copy options for the stage.\n"
                    },
                    "credentials": {
                        "type": "string",
                        "description": "Specifies the credentials for the stage.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stage.\n"
                    },
                    "encryption": {
                        "type": "string",
                        "description": "Specifies the encryption settings for the stage.\n"
                    },
                    "fileFormat": {
                        "type": "string",
                        "description": "Specifies the file format for the stage.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stage.\n"
                    },
                    "snowflakeIamUser": {
                        "type": "string"
                    },
                    "storageIntegration": {
                        "type": "string",
                        "description": "Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Specifies the URL for the stage.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/stageGrant:StageGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.StageGrant(\"grant\", {\n    databaseName: \"db\",\n    onFuture: false,\n    privilege: \"USAGE\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    stageName: \"stage\",\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.StageGrant(\"grant\",\n    database_name=\"db\",\n    on_future=False,\n    privilege=\"USAGE\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    shares=[\n        \"share1\",\n        \"share2\",\n    ],\n    stage_name=\"stage\",\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.StageGrant(\"grant\", new Snowflake.StageGrantArgs\n        {\n            DatabaseName = \"db\",\n            OnFuture = false,\n            Privilege = \"USAGE\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            Shares = \n            {\n                \"share1\",\n                \"share2\",\n            },\n            StageName = \"stage\",\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewStageGrant(ctx, \"grant\", \u0026snowflake.StageGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"db\"),\n\t\t\tOnFuture:     pulumi.Bool(false),\n\t\t\tPrivilege:    pulumi.String(\"USAGE\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tStageName:       pulumi.String(\"stage\"),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | stage name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/stageGrant:StageGrant example 'databaseName|schemaName|stageName|USAGE|true'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current stage on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future stages in the given schema. When this is true and no schema*name is provided apply this grant on all future stages in the given database. The stage*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the stage.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current stage on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "stageName": {
                    "type": "string",
                    "description": "The name of the stage on which to grant privilege (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current stage on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future stages in the given schema. When this is true and no schema*name is provided apply this grant on all future stages in the given database. The stage*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the stage.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current stage on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                },
                "stageName": {
                    "type": "string",
                    "description": "The name of the stage on which to grant privilege (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StageGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current stage on which to grant privileges.\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future stages in the given schema. When this is true and no schema*name is provided apply this grant on all future stages in the given database. The stage*name and shares fields must be unset in order to use on*future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the stage.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current stage on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is false).\n"
                    },
                    "stageName": {
                        "type": "string",
                        "description": "The name of the stage on which to grant privilege (only valid if on_future is false).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/storageIntegration:StorageIntegration": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst integration = new snowflake.StorageIntegration(\"integration\", {\n    comment: \"A storage integration.\",\n    enabled: true,\n    storageAwsExternalId: \"...\",\n    storageAwsIamUserArn: \"...\",\n    storageAwsRoleArn: \"...\",\n    storageProvider: \"S3\",\n    type: \"EXTERNAL_STAGE\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/storageIntegration:StorageIntegration example name\n```\n\n ",
            "properties": {
                "azureConsentUrl": {
                    "type": "string",
                    "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n"
                },
                "azureMultiTenantAppName": {
                    "type": "string",
                    "description": "This is the name of the Snowflake client application created for your account.\n"
                },
                "azureTenantId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdOn": {
                    "type": "string",
                    "description": "Date and time when the storage integration was created.\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsExternalId": {
                    "type": "string",
                    "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                },
                "storageAwsIamUserArn": {
                    "type": "string",
                    "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageGcpServiceAccount": {
                    "type": "string",
                    "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                },
                "storageProvider": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "azureConsentUrl",
                "azureMultiTenantAppName",
                "createdOn",
                "name",
                "storageAllowedLocations",
                "storageAwsExternalId",
                "storageAwsIamUserArn",
                "storageGcpServiceAccount",
                "storageProvider"
            ],
            "inputProperties": {
                "azureTenantId": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "storageAllowedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                },
                "storageAwsRoleArn": {
                    "type": "string"
                },
                "storageBlockedLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                },
                "storageProvider": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "storageAllowedLocations",
                "storageProvider"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageIntegration resources.\n",
                "properties": {
                    "azureConsentUrl": {
                        "type": "string",
                        "description": "The consent URL that is used to create an Azure Snowflake service principle inside your tenant.\n"
                    },
                    "azureMultiTenantAppName": {
                        "type": "string",
                        "description": "This is the name of the Snowflake client application created for your account.\n"
                    },
                    "azureTenantId": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "description": "Date and time when the storage integration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "storageAllowedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly limits external stages that use the integration to reference one or more storage locations.\n"
                    },
                    "storageAwsExternalId": {
                        "type": "string",
                        "description": "The external ID that Snowflake will use when assuming the AWS role.\n"
                    },
                    "storageAwsIamUserArn": {
                        "type": "string",
                        "description": "The Snowflake user that will attempt to assume the AWS role.\n"
                    },
                    "storageAwsRoleArn": {
                        "type": "string"
                    },
                    "storageBlockedLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Explicitly prohibits external stages that use the integration from referencing one or more storage locations.\n"
                    },
                    "storageGcpServiceAccount": {
                        "type": "string",
                        "description": "This is the name of the Snowflake Google Service Account created for your account.\n"
                    },
                    "storageProvider": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/stream:Stream": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst stream = new snowflake.Stream(\"stream\", {\n    appendOnly: false,\n    comment: \"A stream.\",\n    database: \"db\",\n    onTable: \"table\",\n    owner: \"role1\",\n    schema: \"schema\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | on table name\n\n```sh\n $ pulumi import snowflake:index/stream:Stream example 'dbName|schemaName|tableName'\n```\n\n ",
            "properties": {
                "appendOnly": {
                    "type": "boolean",
                    "description": "Type of the stream that will be created.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created.\n"
                },
                "onTable": {
                    "type": "string",
                    "description": "Name of the table the stream will monitor.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the stream.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream.\n"
                },
                "showInitialRows": {
                    "type": "boolean",
                    "description": "Specifies whether to return all existing rows in the source table as row inserts the first time the stream is consumed.\n"
                }
            },
            "required": [
                "database",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "appendOnly": {
                    "type": "boolean",
                    "description": "Type of the stream that will be created.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the stream.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the stream.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created.\n"
                },
                "onTable": {
                    "type": "string",
                    "description": "Name of the table the stream will monitor.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the stream.\n"
                },
                "showInitialRows": {
                    "type": "boolean",
                    "description": "Specifies whether to return all existing rows in the source table as row inserts the first time the stream is consumed.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Stream resources.\n",
                "properties": {
                    "appendOnly": {
                        "type": "boolean",
                        "description": "Type of the stream that will be created.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the stream.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the stream.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the stream; must be unique for the database and schema in which the stream is created.\n"
                    },
                    "onTable": {
                        "type": "string",
                        "description": "Name of the table the stream will monitor.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the stream.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the stream.\n"
                    },
                    "showInitialRows": {
                        "type": "boolean",
                        "description": "Specifies whether to return all existing rows in the source table as row inserts the first time the stream is consumed.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/streamGrant:StreamGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.StreamGrant(\"grant\", {\n    databaseName: \"db\",\n    onFuture: false,\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    streamName: \"view\",\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.StreamGrant(\"grant\",\n    database_name=\"db\",\n    on_future=False,\n    privilege=\"select\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    stream_name=\"view\",\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.StreamGrant(\"grant\", new Snowflake.StreamGrantArgs\n        {\n            DatabaseName = \"db\",\n            OnFuture = false,\n            Privilege = \"select\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            StreamName = \"view\",\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewStreamGrant(ctx, \"grant\", \u0026snowflake.StreamGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"db\"),\n\t\t\tOnFuture:     pulumi.Bool(false),\n\t\t\tPrivilege:    pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName:      pulumi.String(\"schema\"),\n\t\t\tStreamName:      pulumi.String(\"view\"),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | stream name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/streamGrant:StreamGrant example 'dbName|schemaName|streamName|SELECT|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future streams on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future streams in the given schema. When this is true and no schema*name is provided apply this grant on all future streams in the given database. The stream*name field must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future stream.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future streams on which to grant privileges.\n"
                },
                "streamName": {
                    "type": "string",
                    "description": "The name of the stream on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName",
                "schemaName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future streams on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future streams in the given schema. When this is true and no schema*name is provided apply this grant on all future streams in the given database. The stream*name field must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future stream.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future streams on which to grant privileges.\n"
                },
                "streamName": {
                    "type": "string",
                    "description": "The name of the stream on which to grant privileges immediately (only valid if on_future is false).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "schemaName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StreamGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future streams on which to grant privileges.\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future streams in the given schema. When this is true and no schema*name is provided apply this grant on all future streams in the given database. The stream*name field must be unset in order to use on*future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future stream.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future streams on which to grant privileges.\n"
                    },
                    "streamName": {
                        "type": "string",
                        "description": "The name of the stream on which to grant privileges immediately (only valid if on_future is false).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/table:Table": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst table = new snowflake.Table(\"table\", {\n    clusterBies: [\"to_date(DATE)\"],\n    columns: [\n        {\n            name: \"id\",\n            type: \"int\",\n        },\n        {\n            name: \"data\",\n            type: \"text\",\n        },\n        {\n            name: \"DATE\",\n            type: \"TIMESTAMP_NTZ(9)\",\n        },\n    ],\n    comment: \"A table.\",\n    database: \"database\",\n    owner: \"me\",\n    schema: \"schmea\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | table name\n\n```sh\n $ pulumi import snowflake:index/table:Table example 'databaseName|schemaName|tableName'\n```\n\n ",
            "properties": {
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one of more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the role that owns the table.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n"
                }
            },
            "required": [
                "columns",
                "database",
                "name",
                "owner",
                "schema"
            ],
            "inputProperties": {
                "clusterBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one of more table columns/expressions to be used as clustering key(s) for the table\n"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                    },
                    "description": "Definitions of a column to create in the table. Minimum one required.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the table.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the table.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the table.\n"
                }
            },
            "requiredInputs": [
                "columns",
                "database",
                "schema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Table resources.\n",
                "properties": {
                    "clusterBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one of more table columns/expressions to be used as clustering key(s) for the table\n"
                    },
                    "columns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/snowflake:index/TableColumn:TableColumn"
                        },
                        "description": "Definitions of a column to create in the table. Minimum one required.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the table.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the table.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the table; must be unique for the database and schema in which the table is created.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the role that owns the table.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the table.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/tableGrant:TableGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.TableGrant(\"grant\", {\n    databaseName: \"database\",\n    onFuture: false,\n    privilege: \"SELECT\",\n    roles: [\"role1\"],\n    schemaName: \"schema\",\n    shares: [\"share1\"],\n    tableName: \"table\",\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.TableGrant(\"grant\",\n    database_name=\"database\",\n    on_future=False,\n    privilege=\"SELECT\",\n    roles=[\"role1\"],\n    schema_name=\"schema\",\n    shares=[\"share1\"],\n    table_name=\"table\",\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.TableGrant(\"grant\", new Snowflake.TableGrantArgs\n        {\n            DatabaseName = \"database\",\n            OnFuture = false,\n            Privilege = \"SELECT\",\n            Roles = \n            {\n                \"role1\",\n            },\n            SchemaName = \"schema\",\n            Shares = \n            {\n                \"share1\",\n            },\n            TableName = \"table\",\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewTableGrant(ctx, \"grant\", \u0026snowflake.TableGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"database\"),\n\t\t\tOnFuture:     pulumi.Bool(false),\n\t\t\tPrivilege:    pulumi.String(\"SELECT\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t},\n\t\t\tTableName:       pulumi.String(\"table\"),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | table name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/tableGrant:TableGrant example 'databaseName|schemaName|tableName|MODIFY|true'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future tables on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future tables in the given schema. When this is true and no schema*name is provided apply this grant on all future tables in the given database. The table*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future table.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future tables on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                },
                "tableName": {
                    "type": "string",
                    "description": "The name of the table on which to grant privileges immediately (only valid if on_future is unset).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future tables on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future tables in the given schema. When this is true and no schema*name is provided apply this grant on all future tables in the given database. The table*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future table.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future tables on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                },
                "tableName": {
                    "type": "string",
                    "description": "The name of the table on which to grant privileges immediately (only valid if on_future is unset).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TableGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future tables on which to grant privileges.\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future tables in the given schema. When this is true and no schema*name is provided apply this grant on all future tables in the given database. The table*name and shares fields must be unset in order to use on*future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future table.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future tables on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                    },
                    "tableName": {
                        "type": "string",
                        "description": "The name of the table on which to grant privileges immediately (only valid if on_future is unset).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/task:Task": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst task = new snowflake.Task(\"task\", {\n    comment: \"my task\",\n    database: \"db\",\n    schema: \"schema\",\n    warehouse: \"warehouse\",\n    schedule: \"10\",\n    sqlStatement: \"select * from foo;\",\n    sessionParameters: {\n        foo: \"bar\",\n    },\n    userTaskTimeoutMs: 10000,\n    after: \"preceding_task\",\n    when: \"foo AND bar\",\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ntask = snowflake.Task(\"task\",\n    comment=\"my task\",\n    database=\"db\",\n    schema=\"schema\",\n    warehouse=\"warehouse\",\n    schedule=\"10\",\n    sql_statement=\"select * from foo;\",\n    session_parameters={\n        \"foo\": \"bar\",\n    },\n    user_task_timeout_ms=10000,\n    after=\"preceding_task\",\n    when=\"foo AND bar\",\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var task = new Snowflake.Task(\"task\", new Snowflake.TaskArgs\n        {\n            Comment = \"my task\",\n            Database = \"db\",\n            Schema = \"schema\",\n            Warehouse = \"warehouse\",\n            Schedule = \"10\",\n            SqlStatement = \"select * from foo;\",\n            SessionParameters = \n            {\n                { \"foo\", \"bar\" },\n            },\n            UserTaskTimeoutMs = 10000,\n            After = \"preceding_task\",\n            When = \"foo AND bar\",\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewTask(ctx, \"task\", \u0026snowflake.TaskArgs{\n\t\t\tComment:      pulumi.String(\"my task\"),\n\t\t\tDatabase:     pulumi.String(\"db\"),\n\t\t\tSchema:       pulumi.String(\"schema\"),\n\t\t\tWarehouse:    pulumi.String(\"warehouse\"),\n\t\t\tSchedule:     pulumi.String(\"10\"),\n\t\t\tSqlStatement: pulumi.String(\"select * from foo;\"),\n\t\t\tSessionParameters: pulumi.StringMap{\n\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t},\n\t\t\tUserTaskTimeoutMs: pulumi.Int(10000),\n\t\t\tAfter:             pulumi.String(\"preceding_task\"),\n\t\t\tWhen:              pulumi.String(\"foo AND bar\"),\n\t\t\tEnabled:           pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | task name\n\n```sh\n $ pulumi import snowflake:index/task:Task example 'dbName|schemaName|taskName'\n```\n\n ",
            "properties": {
                "after": {
                    "type": "string",
                    "description": "Specifies the predecessor task in the same database and schema of the current task. When a run of the predecessor task finishes successfully, it triggers this task (after a brief lag).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started (enabled) after creation or should remain suspended (default).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task.\n"
                },
                "sessionParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies session parameters to set for the session when the task runs. A task supports all session parameters.\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use.\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.\n"
                }
            },
            "required": [
                "database",
                "name",
                "schema",
                "sqlStatement",
                "warehouse"
            ],
            "inputProperties": {
                "after": {
                    "type": "string",
                    "description": "Specifies the predecessor task in the same database and schema of the current task. When a run of the predecessor task finishes successfully, it triggers this task (after a brief lag).\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the task.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the task.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies if the task should be started (enabled) after creation or should remain suspended (default).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "The schedule for periodically running the task. This can be a cron or interval in minutes.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the task.\n"
                },
                "sessionParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Specifies session parameters to set for the session when the task runs. A task supports all session parameters.\n"
                },
                "sqlStatement": {
                    "type": "string",
                    "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                },
                "userTaskTimeoutMs": {
                    "type": "integer",
                    "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds).\n"
                },
                "warehouse": {
                    "type": "string",
                    "description": "The warehouse the task will use.\n"
                },
                "when": {
                    "type": "string",
                    "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "sqlStatement",
                "warehouse"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Task resources.\n",
                "properties": {
                    "after": {
                        "type": "string",
                        "description": "Specifies the predecessor task in the same database and schema of the current task. When a run of the predecessor task finishes successfully, it triggers this task (after a brief lag).\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the task.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the task.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies if the task should be started (enabled) after creation or should remain suspended (default).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the task; must be unique for the database and schema in which the task is created.\n"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "The schedule for periodically running the task. This can be a cron or interval in minutes.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the task.\n"
                    },
                    "sessionParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Specifies session parameters to set for the session when the task runs. A task supports all session parameters.\n"
                    },
                    "sqlStatement": {
                        "type": "string",
                        "description": "Any single SQL statement, or a call to a stored procedure, executed when the task runs.\n"
                    },
                    "userTaskTimeoutMs": {
                        "type": "integer",
                        "description": "Specifies the time limit on a single run of the task before it times out (in milliseconds).\n"
                    },
                    "warehouse": {
                        "type": "string",
                        "description": "The warehouse the task will use.\n"
                    },
                    "when": {
                        "type": "string",
                        "description": "Specifies a Boolean SQL expression; multiple conditions joined with AND/OR are supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/user:User": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst user = new snowflake.User(\"user\", {\n    comment: \"A user of snowflake.\",\n    defaultRole: \"role1\",\n    defaultWarehouse: \"warehouse\",\n    disabled: false,\n    displayName: \"Snowflake User\",\n    email: \"user@snowflake.example\",\n    firstName: \"Snowflake\",\n    lastName: \"User\",\n    loginName: \"snowflake_user\",\n    mustChangePassword: false,\n    password: \"secret\",\n    rsaPublicKey: \"...\",\n    rsaPublicKey2: \"...\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nuser = snowflake.User(\"user\",\n    comment=\"A user of snowflake.\",\n    default_role=\"role1\",\n    default_warehouse=\"warehouse\",\n    disabled=False,\n    display_name=\"Snowflake User\",\n    email=\"user@snowflake.example\",\n    first_name=\"Snowflake\",\n    last_name=\"User\",\n    login_name=\"snowflake_user\",\n    must_change_password=False,\n    password=\"secret\",\n    rsa_public_key=\"...\",\n    rsa_public_key2=\"...\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Snowflake.User(\"user\", new Snowflake.UserArgs\n        {\n            Comment = \"A user of snowflake.\",\n            DefaultRole = \"role1\",\n            DefaultWarehouse = \"warehouse\",\n            Disabled = false,\n            DisplayName = \"Snowflake User\",\n            Email = \"user@snowflake.example\",\n            FirstName = \"Snowflake\",\n            LastName = \"User\",\n            LoginName = \"snowflake_user\",\n            MustChangePassword = false,\n            Password = \"secret\",\n            RsaPublicKey = \"...\",\n            RsaPublicKey2 = \"...\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewUser(ctx, \"user\", \u0026snowflake.UserArgs{\n\t\t\tComment:            pulumi.String(\"A user of snowflake.\"),\n\t\t\tDefaultRole:        pulumi.String(\"role1\"),\n\t\t\tDefaultWarehouse:   pulumi.String(\"warehouse\"),\n\t\t\tDisabled:           pulumi.Bool(false),\n\t\t\tDisplayName:        pulumi.String(\"Snowflake User\"),\n\t\t\tEmail:              pulumi.String(\"user@snowflake.example\"),\n\t\t\tFirstName:          pulumi.String(\"Snowflake\"),\n\t\t\tLastName:           pulumi.String(\"User\"),\n\t\t\tLoginName:          pulumi.String(\"snowflake_user\"),\n\t\t\tMustChangePassword: pulumi.Bool(false),\n\t\t\tPassword:           pulumi.String(\"secret\"),\n\t\t\tRsaPublicKey:       pulumi.String(\"...\"),\n\t\t\tRsaPublicKey2:      pulumi.String(\"...\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/user:User example userName\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login.\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login.\n"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n"
                },
                "hasRsaPublicKey": {
                    "type": "boolean",
                    "description": "Will be true if user as an RSA key set.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead.\n"
                },
                "mustChangePassword": {
                    "type": "boolean",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)\n"
                },
                "password": {
                    "type": "string",
                    "description": "**WARNING:** this will put the password in the terraform state file. Use carefully.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "required": [
                "defaultRole",
                "disabled",
                "displayName",
                "hasRsaPublicKey",
                "loginName",
                "name"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string"
                },
                "defaultNamespace": {
                    "type": "string",
                    "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.\n"
                },
                "defaultRole": {
                    "type": "string",
                    "description": "Specifies the role that is active by default for the user’s session upon login.\n"
                },
                "defaultWarehouse": {
                    "type": "string",
                    "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login.\n"
                },
                "disabled": {
                    "type": "boolean"
                },
                "displayName": {
                    "type": "string",
                    "description": "Name displayed for the user in the Snowflake web interface.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for the user.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The name users use to log in. If not supplied, snowflake will use name instead.\n"
                },
                "mustChangePassword": {
                    "type": "boolean",
                    "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)\n"
                },
                "password": {
                    "type": "string",
                    "description": "**WARNING:** this will put the password in the terraform state file. Use carefully.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "defaultNamespace": {
                        "type": "string",
                        "description": "Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.\n"
                    },
                    "defaultRole": {
                        "type": "string",
                        "description": "Specifies the role that is active by default for the user’s session upon login.\n"
                    },
                    "defaultWarehouse": {
                        "type": "string",
                        "description": "Specifies the virtual warehouse that is active by default for the user’s session upon login.\n"
                    },
                    "disabled": {
                        "type": "boolean"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Name displayed for the user in the Snowflake web interface.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address for the user.\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the user.\n"
                    },
                    "hasRsaPublicKey": {
                        "type": "boolean",
                        "description": "Will be true if user as an RSA key set.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the user.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The name users use to log in. If not supplied, snowflake will use name instead.\n"
                    },
                    "mustChangePassword": {
                        "type": "boolean",
                        "description": "Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "**WARNING:** this will put the password in the terraform state file. Use carefully.\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/userPublicKeys:UserPublicKeys": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the user.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                },
                "rsaPublicKey2": {
                    "type": "string",
                    "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPublicKeys resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the user.\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.\n"
                    },
                    "rsaPublicKey2": {
                        "type": "string",
                        "description": "Specifies the user’s second RSA public key; used to rotate the public and Public keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/view:View": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst view = new snowflake.View(\"view\", {\n    database: \"db\",\n    schema: \"schema\",\n    comment: \"comment\",\n    statement: \"select * from foo;\\n\",\n    orReplace: false,\n    isSecure: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nview = snowflake.View(\"view\",\n    database=\"db\",\n    schema=\"schema\",\n    comment=\"comment\",\n    statement=\"select * from foo;\\n\",\n    or_replace=False,\n    is_secure=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var view = new Snowflake.View(\"view\", new Snowflake.ViewArgs\n        {\n            Database = \"db\",\n            Schema = \"schema\",\n            Comment = \"comment\",\n            Statement = @\"select * from foo;\n\",\n            OrReplace = false,\n            IsSecure = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewView(ctx, \"view\", \u0026snowflake.ViewArgs{\n\t\t\tDatabase:  pulumi.String(\"db\"),\n\t\t\tSchema:    pulumi.String(\"schema\"),\n\t\t\tComment:   pulumi.String(\"comment\"),\n\t\t\tStatement: pulumi.String(\"select * from foo;\\n\"),\n\t\t\tOrReplace: pulumi.Bool(false),\n\t\t\tIsSecure:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | view name\n\n```sh\n $ pulumi import snowflake:index/view:View example 'dbName|schemaName|viewName'\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Don't use the | character.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                }
            },
            "required": [
                "database",
                "name",
                "schema",
                "statement"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Specifies a comment for the view.\n"
                },
                "database": {
                    "type": "string",
                    "description": "The database in which to create the view. Don't use the | character.\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "Specifies that the view is secure.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Don't use the | character.\n"
                },
                "orReplace": {
                    "type": "boolean",
                    "description": "Overwrites the View if it exists.\n"
                },
                "schema": {
                    "type": "string",
                    "description": "The schema in which to create the view. Don't use the | character.\n"
                },
                "statement": {
                    "type": "string",
                    "description": "Specifies the query used to create the view.\n"
                }
            },
            "requiredInputs": [
                "database",
                "schema",
                "statement"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering View resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Specifies a comment for the view.\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "The database in which to create the view. Don't use the | character.\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "Specifies that the view is secure.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specifies the identifier for the view; must be unique for the schema in which the view is created. Don't use the | character.\n"
                    },
                    "orReplace": {
                        "type": "boolean",
                        "description": "Overwrites the View if it exists.\n"
                    },
                    "schema": {
                        "type": "string",
                        "description": "The schema in which to create the view. Don't use the | character.\n"
                    },
                    "statement": {
                        "type": "string",
                        "description": "Specifies the query used to create the view.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/viewGrant:ViewGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.ViewGrant(\"grant\", {\n    databaseName: \"db\",\n    onFuture: false,\n    privilege: \"select\",\n    roles: [\n        \"role1\",\n        \"role2\",\n    ],\n    schemaName: \"schema\",\n    shares: [\n        \"share1\",\n        \"share2\",\n    ],\n    viewName: \"view\",\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.ViewGrant(\"grant\",\n    database_name=\"db\",\n    on_future=False,\n    privilege=\"select\",\n    roles=[\n        \"role1\",\n        \"role2\",\n    ],\n    schema_name=\"schema\",\n    shares=[\n        \"share1\",\n        \"share2\",\n    ],\n    view_name=\"view\",\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.ViewGrant(\"grant\", new Snowflake.ViewGrantArgs\n        {\n            DatabaseName = \"db\",\n            OnFuture = false,\n            Privilege = \"select\",\n            Roles = \n            {\n                \"role1\",\n                \"role2\",\n            },\n            SchemaName = \"schema\",\n            Shares = \n            {\n                \"share1\",\n                \"share2\",\n            },\n            ViewName = \"view\",\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewViewGrant(ctx, \"grant\", \u0026snowflake.ViewGrantArgs{\n\t\t\tDatabaseName: pulumi.String(\"db\"),\n\t\t\tOnFuture:     pulumi.Bool(false),\n\t\t\tPrivilege:    pulumi.String(\"select\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t\tpulumi.String(\"role2\"),\n\t\t\t},\n\t\t\tSchemaName: pulumi.String(\"schema\"),\n\t\t\tShares: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"share1\"),\n\t\t\t\tpulumi.String(\"share2\"),\n\t\t\t},\n\t\t\tViewName:        pulumi.String(\"view\"),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is database name | schema name | view name | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/viewGrant:ViewGrant example 'dbName|schemaName|viewName|USAGE|false'\n```\n\n ",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future views on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future view.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future views on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                },
                "viewName": {
                    "type": "string",
                    "description": "The name of the view on which to grant privileges immediately (only valid if on_future is unset).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "databaseName"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database containing the current or future views on which to grant privileges.\n"
                },
                "onFuture": {
                    "type": "boolean",
                    "description": "When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.\n"
                },
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the current or future view.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "schemaName": {
                    "type": "string",
                    "description": "The name of the schema containing the current or future views on which to grant privileges.\n"
                },
                "shares": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                },
                "viewName": {
                    "type": "string",
                    "description": "The name of the view on which to grant privileges immediately (only valid if on_future is unset).\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "databaseName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ViewGrant resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of the database containing the current or future views on which to grant privileges.\n"
                    },
                    "onFuture": {
                        "type": "boolean",
                        "description": "When this is set to true and a schema*name is provided, apply this grant on all future views in the given schema. When this is true and no schema*name is provided apply this grant on all future views in the given database. The view*name and shares fields must be unset in order to use on*future.\n"
                    },
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the current or future view.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "schemaName": {
                        "type": "string",
                        "description": "The name of the schema containing the current or future views on which to grant privileges.\n"
                    },
                    "shares": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these shares (only valid if on_future is unset).\n"
                    },
                    "viewName": {
                        "type": "string",
                        "description": "The name of the view on which to grant privileges immediately (only valid if on_future is unset).\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/warehouse:Warehouse": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst warehouse = new snowflake.Warehouse(\"w\", {\n    comment: \"foo\",\n    warehouseSize: \"small\",\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nwarehouse = snowflake.Warehouse(\"warehouse\",\n    comment=\"foo\",\n    warehouse_size=\"small\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var warehouse = new Snowflake.Warehouse(\"warehouse\", new Snowflake.WarehouseArgs\n        {\n            Comment = \"foo\",\n            WarehouseSize = \"small\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewWarehouse(ctx, \"warehouse\", \u0026snowflake.WarehouseArgs{\n\t\t\tComment:       pulumi.String(\"foo\"),\n\t\t\tWarehouseSize: pulumi.String(\"small\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import snowflake:index/warehouse:Warehouse example warehouseName\n```\n\n ",
            "properties": {
                "autoResume": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "waitForProvisioning": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.\n"
                },
                "warehouseSize": {
                    "type": "string"
                }
            },
            "required": [
                "autoResume",
                "autoSuspend",
                "maxClusterCount",
                "minClusterCount",
                "name",
                "resourceMonitor",
                "scalingPolicy",
                "warehouseSize"
            ],
            "inputProperties": {
                "autoResume": {
                    "type": "boolean",
                    "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.\n"
                },
                "autoSuspend": {
                    "type": "integer",
                    "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                },
                "comment": {
                    "type": "string"
                },
                "initiallySuspended": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                },
                "maxClusterCount": {
                    "type": "integer",
                    "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                },
                "minClusterCount": {
                    "type": "integer",
                    "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                },
                "name": {
                    "type": "string"
                },
                "resourceMonitor": {
                    "type": "string",
                    "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse.\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode.\n"
                },
                "statementTimeoutInSeconds": {
                    "type": "integer",
                    "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                },
                "waitForProvisioning": {
                    "type": "boolean",
                    "description": "Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.\n"
                },
                "warehouseSize": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Warehouse resources.\n",
                "properties": {
                    "autoResume": {
                        "type": "boolean",
                        "description": "Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it.\n"
                    },
                    "autoSuspend": {
                        "type": "integer",
                        "description": "Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.\n"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "initiallySuspended": {
                        "type": "boolean",
                        "description": "Specifies whether the warehouse is created initially in the ‘Suspended’ state.\n"
                    },
                    "maxClusterCount": {
                        "type": "integer",
                        "description": "Specifies the maximum number of server clusters for the warehouse.\n"
                    },
                    "minClusterCount": {
                        "type": "integer",
                        "description": "Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "resourceMonitor": {
                        "type": "string",
                        "description": "Specifies the name of a resource monitor that is explicitly assigned to the warehouse.\n"
                    },
                    "scalingPolicy": {
                        "type": "string",
                        "description": "Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode.\n"
                    },
                    "statementTimeoutInSeconds": {
                        "type": "integer",
                        "description": "Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system\n"
                    },
                    "waitForProvisioning": {
                        "type": "boolean",
                        "description": "Specifies whether the warehouse, after being resized, waits for all the servers to provision before executing any queued or new queries.\n"
                    },
                    "warehouseSize": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "snowflake:index/warehouseGrant:WarehouseGrant": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst grant = new snowflake.WarehouseGrant(\"grant\", {\n    privilege: \"MODIFY\",\n    roles: [\"role1\"],\n    warehouseName: \"wh\",\n    withGrantOption: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\ngrant = snowflake.WarehouseGrant(\"grant\",\n    privilege=\"MODIFY\",\n    roles=[\"role1\"],\n    warehouse_name=\"wh\",\n    with_grant_option=False)\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var grant = new Snowflake.WarehouseGrant(\"grant\", new Snowflake.WarehouseGrantArgs\n        {\n            Privilege = \"MODIFY\",\n            Roles = \n            {\n                \"role1\",\n            },\n            WarehouseName = \"wh\",\n            WithGrantOption = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.NewWarehouseGrant(ctx, \"grant\", \u0026snowflake.WarehouseGrantArgs{\n\t\t\tPrivilege: pulumi.String(\"MODIFY\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"role1\"),\n\t\t\t},\n\t\t\tWarehouseName:   pulumi.String(\"wh\"),\n\t\t\tWithGrantOption: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n# format is warehouse name | | | privilege | true/false for with_grant_option\n\n```sh\n $ pulumi import snowflake:index/warehouseGrant:WarehouseGrant example 'warehouseName|||MODIFY|true'\n```\n\n ",
            "properties": {
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the warehouse.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "warehouseName": {
                    "type": "string",
                    "description": "The name of the warehouse on which to grant privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "required": [
                "warehouseName"
            ],
            "inputProperties": {
                "privilege": {
                    "type": "string",
                    "description": "The privilege to grant on the warehouse.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grants privilege to these roles.\n"
                },
                "warehouseName": {
                    "type": "string",
                    "description": "The name of the warehouse on which to grant privileges.\n"
                },
                "withGrantOption": {
                    "type": "boolean",
                    "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                }
            },
            "requiredInputs": [
                "warehouseName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WarehouseGrant resources.\n",
                "properties": {
                    "privilege": {
                        "type": "string",
                        "description": "The privilege to grant on the warehouse.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grants privilege to these roles.\n"
                    },
                    "warehouseName": {
                        "type": "string",
                        "description": "The name of the warehouse on which to grant privileges.\n"
                    },
                    "withGrantOption": {
                        "type": "boolean",
                        "description": "When this is set to true, allows the recipient role to grant the privileges to other roles.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "snowflake:index/getCurrentAccount:getCurrentAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst this = snowflake.getCurrentAccount({});\nconst snowflakeAccountUrl = new aws.ssm.Parameter(\"snowflakeAccountUrl\", {\n    type: \"String\",\n    value: _this.then(_this =\u003e _this.url),\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_snowflake as snowflake\n\nthis = snowflake.get_current_account()\nsnowflake_account_url = aws.ssm.Parameter(\"snowflakeAccountUrl\",\n    type=\"String\",\n    value=this.url)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @this = Output.Create(Snowflake.GetCurrentAccount.InvokeAsync());\n        var snowflakeAccountUrl = new Aws.Ssm.Parameter(\"snowflakeAccountUrl\", new Aws.Ssm.ParameterArgs\n        {\n            Type = \"String\",\n            Value = @this.Apply(@this =\u003e @this.Url),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/ssm\"\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthis, err := snowflake.GetCurrentAccount(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ssm.NewParameter(ctx, \"snowflakeAccountUrl\", \u0026ssm.ParameterArgs{\n\t\t\tType:  pulumi.String(\"String\"),\n\t\t\tValue: pulumi.String(this.Url),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCurrentAccount.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "The Snowflake Account ID; as returned by CURRENT_ACCOUNT().\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The Snowflake Region; as returned by CURRENT_REGION()\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The Snowflake URL.\n"
                    }
                },
                "type": "object",
                "required": [
                    "account",
                    "region",
                    "url",
                    "id"
                ]
            }
        },
        "snowflake:index/getSystemGenerateScimAccessToken:getSystemGenerateScimAccessToken": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as snowflake from \"@pulumi/snowflake\";\n\nconst scim = pulumi.output(snowflake.getSystemGenerateScimAccessToken({\n    integrationName: \"AAD_PROVISIONING\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_snowflake as snowflake\n\nscim = snowflake.get_system_generate_scim_access_token(integration_name=\"AAD_PROVISIONING\")\n```\n```csharp\nusing Pulumi;\nusing Snowflake = Pulumi.Snowflake;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var scim = Output.Create(Snowflake.GetSystemGenerateScimAccessToken.InvokeAsync(new Snowflake.GetSystemGenerateScimAccessTokenArgs\n        {\n            IntegrationName = \"AAD_PROVISIONING\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-snowflake/sdk/go/snowflake\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := snowflake.GetSystemGenerateScimAccessToken(ctx, \u0026GetSystemGenerateScimAccessTokenArgs{\n\t\t\tIntegrationName: \"AAD_PROVISIONING\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "integrationName": {
                        "type": "string",
                        "description": "SCIM Integration Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGenerateScimAccessToken.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "SCIM Access Token\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationName": {
                        "type": "string",
                        "description": "SCIM Integration Name\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "integrationName",
                    "id"
                ]
            }
        },
        "snowflake:index/getSystemGetAwsSnsIamPolicy:getSystemGetAwsSnsIamPolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Amazon Resource Name (ARN) of the SNS topic for your S3 bucket\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsSnsTopicArn"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemGetAwsSnsIamPolicy.\n",
                "properties": {
                    "awsSnsTopicArn": {
                        "type": "string",
                        "description": "Amazon Resource Name (ARN) of the SNS topic for your S3 bucket\n"
                    },
                    "awsSnsTopicPolicyJson": {
                        "type": "string",
                        "description": "IAM policy for Snowflake’s SQS queue to subscribe to this topic\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsSnsTopicArn",
                    "awsSnsTopicPolicyJson",
                    "id"
                ]
            }
        },
        "snowflake:index/getSystemGetPrivateLinkConfig:getSystemGetPrivateLinkConfig": {
            "outputs": {
                "description": "A collection of values returned by getSystemGetPrivateLinkConfig.\n",
                "properties": {
                    "accountName": {
                        "type": "string",
                        "description": "The name of your Snowflake account.\n"
                    },
                    "accountUrl": {
                        "type": "string",
                        "description": "The URL used to connect to Snowflake through AWS PrivateLink or Azure Private Link.\n"
                    },
                    "awsVpceId": {
                        "type": "string",
                        "description": "The AWS VPCE ID for your account.\n"
                    },
                    "azurePlsId": {
                        "type": "string",
                        "description": "The Azure Private Link Service ID for your account.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "oscpUrl": {
                        "type": "string",
                        "description": "The OCSP URL corresponding to your Snowflake account that uses AWS PrivateLink or Azure Private Link.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountName",
                    "accountUrl",
                    "awsVpceId",
                    "azurePlsId",
                    "oscpUrl",
                    "id"
                ]
            }
        },
        "snowflake:index/getSystemGetSnowflakePlatformInfo:getSystemGetSnowflakePlatformInfo": {
            "outputs": {
                "description": "A collection of values returned by getSystemGetSnowflakePlatformInfo.\n",
                "properties": {
                    "awsVpcIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "azureVnetSubnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsVpcIds",
                    "azureVnetSubnetIds",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-snowflake/sdk/go/snowflake"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing snowflake cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/chanzuckerberg/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`chanzuckerberg/terraform-provider-snowflake` repo](https://github.com/chanzuckerberg/terraform-provider-snowflake/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/chanzuckerberg/terraform-provider-snowflake)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-snowflake` repo](https://github.com/pulumi/pulumi-snowflake/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`chanzuckerberg/terraform-provider-snowflake` repo](https://github.com/chanzuckerberg/terraform-provider-snowflake/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}