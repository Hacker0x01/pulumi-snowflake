// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NotificationIntegration extends pulumi.CustomResource {
    /**
     * Get an existing NotificationIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationIntegrationState, opts?: pulumi.CustomResourceOptions): NotificationIntegration {
        return new NotificationIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/notificationIntegration:NotificationIntegration';

    /**
     * Returns true if the given object is an instance of NotificationIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationIntegration.__pulumiType;
    }

    /**
     * The queue ID for the Azure Queue Storage queue created for Event Grid notifications
     */
    public readonly azureStorageQueuePrimaryUri!: pulumi.Output<string>;
    /**
     * The ID of the Azure Active Directory tenant used for identity management
     */
    public readonly azureTenantId!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Date and time when the notification integration was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)
     */
    public readonly notificationProvider!: pulumi.Output<string | undefined>;
    /**
     * A type of integration
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a NotificationIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationIntegrationArgs | NotificationIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationIntegrationState | undefined;
            inputs["azureStorageQueuePrimaryUri"] = state ? state.azureStorageQueuePrimaryUri : undefined;
            inputs["azureTenantId"] = state ? state.azureTenantId : undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["createdOn"] = state ? state.createdOn : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notificationProvider"] = state ? state.notificationProvider : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NotificationIntegrationArgs | undefined;
            if ((!args || args.azureStorageQueuePrimaryUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureStorageQueuePrimaryUri'");
            }
            if ((!args || args.azureTenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureTenantId'");
            }
            inputs["azureStorageQueuePrimaryUri"] = args ? args.azureStorageQueuePrimaryUri : undefined;
            inputs["azureTenantId"] = args ? args.azureTenantId : undefined;
            inputs["comment"] = args ? args.comment : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notificationProvider"] = args ? args.notificationProvider : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["createdOn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(NotificationIntegration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationIntegration resources.
 */
export interface NotificationIntegrationState {
    /**
     * The queue ID for the Azure Queue Storage queue created for Event Grid notifications
     */
    azureStorageQueuePrimaryUri?: pulumi.Input<string>;
    /**
     * The ID of the Azure Active Directory tenant used for identity management
     */
    azureTenantId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Date and time when the notification integration was created.
     */
    createdOn?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)
     */
    notificationProvider?: pulumi.Input<string>;
    /**
     * A type of integration
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationIntegration resource.
 */
export interface NotificationIntegrationArgs {
    /**
     * The queue ID for the Azure Queue Storage queue created for Event Grid notifications
     */
    azureStorageQueuePrimaryUri: pulumi.Input<string>;
    /**
     * The ID of the Azure Active Directory tenant used for identity management
     */
    azureTenantId: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)
     */
    notificationProvider?: pulumi.Input<string>;
    /**
     * A type of integration
     */
    type?: pulumi.Input<string>;
}
