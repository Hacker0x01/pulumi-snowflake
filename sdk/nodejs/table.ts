// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * const table = new snowflake.Table("table", {
 *     clusterBies: ["to_date(DATE)"],
 *     columns: [
 *         {
 *             name: "id",
 *             type: "int",
 *         },
 *         {
 *             name: "data",
 *             type: "text",
 *         },
 *         {
 *             name: "DATE",
 *             type: "TIMESTAMP_NTZ(9)",
 *         },
 *     ],
 *     comment: "A table.",
 *     database: "database",
 *     owner: "me",
 *     schema: "schmea",
 * });
 * ```
 *
 * ## Import
 *
 * # format is database name | schema name | table name
 *
 * ```sh
 *  $ pulumi import snowflake:index/table:Table example 'databaseName|schemaName|tableName'
 * ```
 */
export class Table extends pulumi.CustomResource {
    /**
     * Get an existing Table resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TableState, opts?: pulumi.CustomResourceOptions): Table {
        return new Table(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/table:Table';

    /**
     * Returns true if the given object is an instance of Table.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Table {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Table.__pulumiType;
    }

    /**
     * A list of one of more table columns/expressions to be used as clustering key(s) for the table
     */
    public readonly clusterBies!: pulumi.Output<string[] | undefined>;
    /**
     * Definitions of a column to create in the table. Minimum one required.
     */
    public readonly columns!: pulumi.Output<outputs.TableColumn[]>;
    /**
     * Specifies a comment for the table.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The database in which to create the table.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * Specifies the identifier for the table; must be unique for the database and schema in which the table is created.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the role that owns the table.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * The schema in which to create the table.
     */
    public readonly schema!: pulumi.Output<string>;

    /**
     * Create a Table resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TableArgs | TableState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TableState | undefined;
            inputs["clusterBies"] = state ? state.clusterBies : undefined;
            inputs["columns"] = state ? state.columns : undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["database"] = state ? state.database : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["owner"] = state ? state.owner : undefined;
            inputs["schema"] = state ? state.schema : undefined;
        } else {
            const args = argsOrState as TableArgs | undefined;
            if ((!args || args.columns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'columns'");
            }
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            inputs["clusterBies"] = args ? args.clusterBies : undefined;
            inputs["columns"] = args ? args.columns : undefined;
            inputs["comment"] = args ? args.comment : undefined;
            inputs["database"] = args ? args.database : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["schema"] = args ? args.schema : undefined;
            inputs["owner"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Table.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Table resources.
 */
export interface TableState {
    /**
     * A list of one of more table columns/expressions to be used as clustering key(s) for the table
     */
    clusterBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Definitions of a column to create in the table. Minimum one required.
     */
    columns?: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * Specifies a comment for the table.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the table.
     */
    database?: pulumi.Input<string>;
    /**
     * Specifies the identifier for the table; must be unique for the database and schema in which the table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the role that owns the table.
     */
    owner?: pulumi.Input<string>;
    /**
     * The schema in which to create the table.
     */
    schema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Table resource.
 */
export interface TableArgs {
    /**
     * A list of one of more table columns/expressions to be used as clustering key(s) for the table
     */
    clusterBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Definitions of a column to create in the table. Minimum one required.
     */
    columns: pulumi.Input<pulumi.Input<inputs.TableColumn>[]>;
    /**
     * Specifies a comment for the table.
     */
    comment?: pulumi.Input<string>;
    /**
     * The database in which to create the table.
     */
    database: pulumi.Input<string>;
    /**
     * Specifies the identifier for the table; must be unique for the database and schema in which the table is created.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema in which to create the table.
     */
    schema: pulumi.Input<string>;
}
