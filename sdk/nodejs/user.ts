// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * const user = new snowflake.User("user", {
 *     comment: "A user of snowflake.",
 *     defaultRole: "role1",
 *     defaultWarehouse: "warehouse",
 *     disabled: false,
 *     displayName: "Snowflake User",
 *     email: "user@snowflake.example",
 *     firstName: "Snowflake",
 *     lastName: "User",
 *     loginName: "snowflake_user",
 *     mustChangePassword: false,
 *     password: "secret",
 *     rsaPublicKey: "...",
 *     rsaPublicKey2: "...",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import snowflake:index/user:User example userName
 * ```
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
     */
    public readonly defaultNamespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies the role that is active by default for the user’s session upon login.
     */
    public readonly defaultRole!: pulumi.Output<string>;
    /**
     * Specifies the virtual warehouse that is active by default for the user’s session upon login.
     */
    public readonly defaultWarehouse!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * Name displayed for the user in the Snowflake web interface.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Email address for the user.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * First name of the user.
     */
    public readonly firstName!: pulumi.Output<string | undefined>;
    /**
     * Will be true if user as an RSA key set.
     */
    public /*out*/ readonly hasRsaPublicKey!: pulumi.Output<boolean>;
    /**
     * Last name of the user.
     */
    public readonly lastName!: pulumi.Output<string | undefined>;
    /**
     * The name users use to log in. If not supplied, snowflake will use name instead.
     */
    public readonly loginName!: pulumi.Output<string>;
    /**
     * Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
     */
    public readonly mustChangePassword!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * **WARNING:** this will put the password in the terraform state file. Use carefully.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
     */
    public readonly rsaPublicKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
     */
    public readonly rsaPublicKey2!: pulumi.Output<string | undefined>;
    /**
     * Definitions of a tag to associate with the resource.
     */
    public readonly tags!: pulumi.Output<outputs.UserTag[] | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["defaultNamespace"] = state ? state.defaultNamespace : undefined;
            inputs["defaultRole"] = state ? state.defaultRole : undefined;
            inputs["defaultWarehouse"] = state ? state.defaultWarehouse : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["firstName"] = state ? state.firstName : undefined;
            inputs["hasRsaPublicKey"] = state ? state.hasRsaPublicKey : undefined;
            inputs["lastName"] = state ? state.lastName : undefined;
            inputs["loginName"] = state ? state.loginName : undefined;
            inputs["mustChangePassword"] = state ? state.mustChangePassword : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["rsaPublicKey"] = state ? state.rsaPublicKey : undefined;
            inputs["rsaPublicKey2"] = state ? state.rsaPublicKey2 : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            inputs["comment"] = args ? args.comment : undefined;
            inputs["defaultNamespace"] = args ? args.defaultNamespace : undefined;
            inputs["defaultRole"] = args ? args.defaultRole : undefined;
            inputs["defaultWarehouse"] = args ? args.defaultWarehouse : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["email"] = args ? args.email : undefined;
            inputs["firstName"] = args ? args.firstName : undefined;
            inputs["lastName"] = args ? args.lastName : undefined;
            inputs["loginName"] = args ? args.loginName : undefined;
            inputs["mustChangePassword"] = args ? args.mustChangePassword : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["rsaPublicKey"] = args ? args.rsaPublicKey : undefined;
            inputs["rsaPublicKey2"] = args ? args.rsaPublicKey2 : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["hasRsaPublicKey"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(User.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    comment?: pulumi.Input<string>;
    /**
     * Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
     */
    defaultNamespace?: pulumi.Input<string>;
    /**
     * Specifies the role that is active by default for the user’s session upon login.
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * Specifies the virtual warehouse that is active by default for the user’s session upon login.
     */
    defaultWarehouse?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Name displayed for the user in the Snowflake web interface.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email address for the user.
     */
    email?: pulumi.Input<string>;
    /**
     * First name of the user.
     */
    firstName?: pulumi.Input<string>;
    /**
     * Will be true if user as an RSA key set.
     */
    hasRsaPublicKey?: pulumi.Input<boolean>;
    /**
     * Last name of the user.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The name users use to log in. If not supplied, snowflake will use name instead.
     */
    loginName?: pulumi.Input<string>;
    /**
     * Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
     */
    mustChangePassword?: pulumi.Input<boolean>;
    /**
     * Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)
     */
    name?: pulumi.Input<string>;
    /**
     * **WARNING:** this will put the password in the terraform state file. Use carefully.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
     */
    rsaPublicKey?: pulumi.Input<string>;
    /**
     * Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
     */
    rsaPublicKey2?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.UserTag>[]>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    comment?: pulumi.Input<string>;
    /**
     * Specifies the namespace (database only or database and schema) that is active by default for the user’s session upon login.
     */
    defaultNamespace?: pulumi.Input<string>;
    /**
     * Specifies the role that is active by default for the user’s session upon login.
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * Specifies the virtual warehouse that is active by default for the user’s session upon login.
     */
    defaultWarehouse?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Name displayed for the user in the Snowflake web interface.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email address for the user.
     */
    email?: pulumi.Input<string>;
    /**
     * First name of the user.
     */
    firstName?: pulumi.Input<string>;
    /**
     * Last name of the user.
     */
    lastName?: pulumi.Input<string>;
    /**
     * The name users use to log in. If not supplied, snowflake will use name instead.
     */
    loginName?: pulumi.Input<string>;
    /**
     * Specifies whether the user is forced to change their password on next login (including their first/initial login) into the system.
     */
    mustChangePassword?: pulumi.Input<boolean>;
    /**
     * Name of the user. Note that if you do not supply login*name this will be used as login*name. [doc](https://docs.snowflake.net/manuals/sql-reference/sql/create-user.html#required-parameters)
     */
    name?: pulumi.Input<string>;
    /**
     * **WARNING:** this will put the password in the terraform state file. Use carefully.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the user’s RSA public key; used for key-pair authentication. Must be on 1 line without header and trailer.
     */
    rsaPublicKey?: pulumi.Input<string>;
    /**
     * Specifies the user’s second RSA public key; used to rotate the public and private keys for key-pair authentication based on an expiration schedule set by your organization. Must be on 1 line without header and trailer.
     */
    rsaPublicKey2?: pulumi.Input<string>;
    /**
     * Definitions of a tag to associate with the resource.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.UserTag>[]>;
}
