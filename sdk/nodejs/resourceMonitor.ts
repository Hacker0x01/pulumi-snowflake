// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as snowflake from "@pulumi/snowflake";
 *
 * const monitor = new snowflake.ResourceMonitor("monitor", {
 *     creditQuota: 100,
 *     endTimestamp: "2021-12-07 00:00",
 *     frequency: "DAILY",
 *     notifyTriggers: [40],
 *     startTimestamp: "2020-12-07 00:00",
 *     suspendImmediateTriggers: [90],
 *     suspendTriggers: [50],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import snowflake:index/resourceMonitor:ResourceMonitor example
 * ```
 */
export class ResourceMonitor extends pulumi.CustomResource {
    /**
     * Get an existing ResourceMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceMonitorState, opts?: pulumi.CustomResourceOptions): ResourceMonitor {
        return new ResourceMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'snowflake:index/resourceMonitor:ResourceMonitor';

    /**
     * Returns true if the given object is an instance of ResourceMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceMonitor.__pulumiType;
    }

    /**
     * The number of credits allocated monthly to the resource monitor.
     */
    public readonly creditQuota!: pulumi.Output<number>;
    /**
     * The date and time when the resource monitor suspends the assigned warehouses.
     */
    public readonly endTimestamp!: pulumi.Output<string | undefined>;
    /**
     * The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
     */
    public readonly frequency!: pulumi.Output<string>;
    /**
     * Identifier for the resource monitor; must be unique for your account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of percentage thresholds at which to send an alert to subscribed users.
     */
    public readonly notifyTriggers!: pulumi.Output<number[] | undefined>;
    /**
     * Specifies whether the resource monitor should be applied globally to your Snowflake account.
     */
    public readonly setForAccount!: pulumi.Output<boolean | undefined>;
    /**
     * The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
     */
    public readonly startTimestamp!: pulumi.Output<string>;
    /**
     * A list of percentage thresholds at which to immediately suspend all warehouses.
     */
    public readonly suspendImmediateTriggers!: pulumi.Output<number[] | undefined>;
    /**
     * A list of percentage thresholds at which to suspend all warehouses.
     */
    public readonly suspendTriggers!: pulumi.Output<number[] | undefined>;

    /**
     * Create a ResourceMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourceMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceMonitorArgs | ResourceMonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceMonitorState | undefined;
            inputs["creditQuota"] = state ? state.creditQuota : undefined;
            inputs["endTimestamp"] = state ? state.endTimestamp : undefined;
            inputs["frequency"] = state ? state.frequency : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifyTriggers"] = state ? state.notifyTriggers : undefined;
            inputs["setForAccount"] = state ? state.setForAccount : undefined;
            inputs["startTimestamp"] = state ? state.startTimestamp : undefined;
            inputs["suspendImmediateTriggers"] = state ? state.suspendImmediateTriggers : undefined;
            inputs["suspendTriggers"] = state ? state.suspendTriggers : undefined;
        } else {
            const args = argsOrState as ResourceMonitorArgs | undefined;
            inputs["creditQuota"] = args ? args.creditQuota : undefined;
            inputs["endTimestamp"] = args ? args.endTimestamp : undefined;
            inputs["frequency"] = args ? args.frequency : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifyTriggers"] = args ? args.notifyTriggers : undefined;
            inputs["setForAccount"] = args ? args.setForAccount : undefined;
            inputs["startTimestamp"] = args ? args.startTimestamp : undefined;
            inputs["suspendImmediateTriggers"] = args ? args.suspendImmediateTriggers : undefined;
            inputs["suspendTriggers"] = args ? args.suspendTriggers : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ResourceMonitor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceMonitor resources.
 */
export interface ResourceMonitorState {
    /**
     * The number of credits allocated monthly to the resource monitor.
     */
    creditQuota?: pulumi.Input<number>;
    /**
     * The date and time when the resource monitor suspends the assigned warehouses.
     */
    endTimestamp?: pulumi.Input<string>;
    /**
     * The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
     */
    frequency?: pulumi.Input<string>;
    /**
     * Identifier for the resource monitor; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of percentage thresholds at which to send an alert to subscribed users.
     */
    notifyTriggers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies whether the resource monitor should be applied globally to your Snowflake account.
     */
    setForAccount?: pulumi.Input<boolean>;
    /**
     * The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
     */
    startTimestamp?: pulumi.Input<string>;
    /**
     * A list of percentage thresholds at which to immediately suspend all warehouses.
     */
    suspendImmediateTriggers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of percentage thresholds at which to suspend all warehouses.
     */
    suspendTriggers?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ResourceMonitor resource.
 */
export interface ResourceMonitorArgs {
    /**
     * The number of credits allocated monthly to the resource monitor.
     */
    creditQuota?: pulumi.Input<number>;
    /**
     * The date and time when the resource monitor suspends the assigned warehouses.
     */
    endTimestamp?: pulumi.Input<string>;
    /**
     * The frequency interval at which the credit usage resets to 0. If you set a frequency for a resource monitor, you must also set START_TIMESTAMP.
     */
    frequency?: pulumi.Input<string>;
    /**
     * Identifier for the resource monitor; must be unique for your account.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of percentage thresholds at which to send an alert to subscribed users.
     */
    notifyTriggers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies whether the resource monitor should be applied globally to your Snowflake account.
     */
    setForAccount?: pulumi.Input<boolean>;
    /**
     * The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses.
     */
    startTimestamp?: pulumi.Input<string>;
    /**
     * A list of percentage thresholds at which to immediately suspend all warehouses.
     */
    suspendImmediateTriggers?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of percentage thresholds at which to suspend all warehouses.
     */
    suspendTriggers?: pulumi.Input<pulumi.Input<number>[]>;
}
