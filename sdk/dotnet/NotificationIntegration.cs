// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Snowflake
{
    [SnowflakeResourceType("snowflake:index/notificationIntegration:NotificationIntegration")]
    public partial class NotificationIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// The queue ID for the Azure Queue Storage queue created for Event Grid notifications
        /// </summary>
        [Output("azureStorageQueuePrimaryUri")]
        public Output<string> AzureStorageQueuePrimaryUri { get; private set; } = null!;

        /// <summary>
        /// The ID of the Azure Active Directory tenant used for identity management
        /// </summary>
        [Output("azureTenantId")]
        public Output<string> AzureTenantId { get; private set; } = null!;

        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Date and time when the notification integration was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)
        /// </summary>
        [Output("notificationProvider")]
        public Output<string?> NotificationProvider { get; private set; } = null!;

        /// <summary>
        /// A type of integration
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationIntegration(string name, NotificationIntegrationArgs args, CustomResourceOptions? options = null)
            : base("snowflake:index/notificationIntegration:NotificationIntegration", name, args ?? new NotificationIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationIntegration(string name, Input<string> id, NotificationIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("snowflake:index/notificationIntegration:NotificationIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationIntegration Get(string name, Input<string> id, NotificationIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationIntegration(name, id, state, options);
        }
    }

    public sealed class NotificationIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The queue ID for the Azure Queue Storage queue created for Event Grid notifications
        /// </summary>
        [Input("azureStorageQueuePrimaryUri", required: true)]
        public Input<string> AzureStorageQueuePrimaryUri { get; set; } = null!;

        /// <summary>
        /// The ID of the Azure Active Directory tenant used for identity management
        /// </summary>
        [Input("azureTenantId", required: true)]
        public Input<string> AzureTenantId { get; set; } = null!;

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)
        /// </summary>
        [Input("notificationProvider")]
        public Input<string>? NotificationProvider { get; set; }

        /// <summary>
        /// A type of integration
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NotificationIntegrationArgs()
        {
        }
    }

    public sealed class NotificationIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The queue ID for the Azure Queue Storage queue created for Event Grid notifications
        /// </summary>
        [Input("azureStorageQueuePrimaryUri")]
        public Input<string>? AzureStorageQueuePrimaryUri { get; set; }

        /// <summary>
        /// The ID of the Azure Active Directory tenant used for identity management
        /// </summary>
        [Input("azureTenantId")]
        public Input<string>? AzureTenantId { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Date and time when the notification integration was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The third-party cloud message queuing service (e.g. AZURE*STORAGE*QUEUE)
        /// </summary>
        [Input("notificationProvider")]
        public Input<string>? NotificationProvider { get; set; }

        /// <summary>
        /// A type of integration
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public NotificationIntegrationState()
        {
        }
    }
}
