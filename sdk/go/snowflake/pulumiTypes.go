// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExternalFunctionArg struct {
	// Argument name
	Name string `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type string `pulumi:"type"`
}

// ExternalFunctionArgInput is an input type that accepts ExternalFunctionArgArgs and ExternalFunctionArgOutput values.
// You can construct a concrete instance of `ExternalFunctionArgInput` via:
//
//          ExternalFunctionArgArgs{...}
type ExternalFunctionArgInput interface {
	pulumi.Input

	ToExternalFunctionArgOutput() ExternalFunctionArgOutput
	ToExternalFunctionArgOutputWithContext(context.Context) ExternalFunctionArgOutput
}

type ExternalFunctionArgArgs struct {
	// Argument name
	Name pulumi.StringInput `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalFunctionArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return i.ToExternalFunctionArgOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgOutput)
}

// ExternalFunctionArgArrayInput is an input type that accepts ExternalFunctionArgArray and ExternalFunctionArgArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionArgArrayInput` via:
//
//          ExternalFunctionArgArray{ ExternalFunctionArgArgs{...} }
type ExternalFunctionArgArrayInput interface {
	pulumi.Input

	ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput
	ToExternalFunctionArgArrayOutputWithContext(context.Context) ExternalFunctionArgArrayOutput
}

type ExternalFunctionArgArray []ExternalFunctionArgInput

func (ExternalFunctionArgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return i.ToExternalFunctionArgArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgArrayOutput)
}

type ExternalFunctionArgOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return o
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return o
}

// Argument name
func (o ExternalFunctionArgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Name }).(pulumi.StringOutput)
}

// Argument type, e.g. VARCHAR
func (o ExternalFunctionArgOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalFunctionArgArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) Index(i pulumi.IntInput) ExternalFunctionArgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionArg {
		return vs[0].([]ExternalFunctionArg)[vs[1].(int)]
	}).(ExternalFunctionArgOutput)
}

type ExternalFunctionHeader struct {
	// Header name
	Name string `pulumi:"name"`
	// Header value
	Value string `pulumi:"value"`
}

// ExternalFunctionHeaderInput is an input type that accepts ExternalFunctionHeaderArgs and ExternalFunctionHeaderOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderInput` via:
//
//          ExternalFunctionHeaderArgs{...}
type ExternalFunctionHeaderInput interface {
	pulumi.Input

	ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput
	ToExternalFunctionHeaderOutputWithContext(context.Context) ExternalFunctionHeaderOutput
}

type ExternalFunctionHeaderArgs struct {
	// Header name
	Name pulumi.StringInput `pulumi:"name"`
	// Header value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExternalFunctionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return i.ToExternalFunctionHeaderOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderOutput)
}

// ExternalFunctionHeaderArrayInput is an input type that accepts ExternalFunctionHeaderArray and ExternalFunctionHeaderArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderArrayInput` via:
//
//          ExternalFunctionHeaderArray{ ExternalFunctionHeaderArgs{...} }
type ExternalFunctionHeaderArrayInput interface {
	pulumi.Input

	ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput
	ToExternalFunctionHeaderArrayOutputWithContext(context.Context) ExternalFunctionHeaderArrayOutput
}

type ExternalFunctionHeaderArray []ExternalFunctionHeaderInput

func (ExternalFunctionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return i.ToExternalFunctionHeaderArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderArrayOutput)
}

type ExternalFunctionHeaderOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return o
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return o
}

// Header name
func (o ExternalFunctionHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Header value
func (o ExternalFunctionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ExternalFunctionHeaderArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) Index(i pulumi.IntInput) ExternalFunctionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionHeader {
		return vs[0].([]ExternalFunctionHeader)[vs[1].(int)]
	}).(ExternalFunctionHeaderOutput)
}

type ExternalTableColumn struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As string `pulumi:"as"`
	// Column name
	Name string `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// ExternalTableColumnInput is an input type that accepts ExternalTableColumnArgs and ExternalTableColumnOutput values.
// You can construct a concrete instance of `ExternalTableColumnInput` via:
//
//          ExternalTableColumnArgs{...}
type ExternalTableColumnInput interface {
	pulumi.Input

	ToExternalTableColumnOutput() ExternalTableColumnOutput
	ToExternalTableColumnOutputWithContext(context.Context) ExternalTableColumnOutput
}

type ExternalTableColumnArgs struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As pulumi.StringInput `pulumi:"as"`
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalTableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return i.ToExternalTableColumnOutputWithContext(context.Background())
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnOutput)
}

// ExternalTableColumnArrayInput is an input type that accepts ExternalTableColumnArray and ExternalTableColumnArrayOutput values.
// You can construct a concrete instance of `ExternalTableColumnArrayInput` via:
//
//          ExternalTableColumnArray{ ExternalTableColumnArgs{...} }
type ExternalTableColumnArrayInput interface {
	pulumi.Input

	ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput
	ToExternalTableColumnArrayOutputWithContext(context.Context) ExternalTableColumnArrayOutput
}

type ExternalTableColumnArray []ExternalTableColumnInput

func (ExternalTableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return i.ToExternalTableColumnArrayOutputWithContext(context.Background())
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnArrayOutput)
}

type ExternalTableColumnOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return o
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return o
}

// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
func (o ExternalTableColumnOutput) As() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.As }).(pulumi.StringOutput)
}

// Column name
func (o ExternalTableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Column type, e.g. VARIANT
func (o ExternalTableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalTableColumnArrayOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) Index(i pulumi.IntInput) ExternalTableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalTableColumn {
		return vs[0].([]ExternalTableColumn)[vs[1].(int)]
	}).(ExternalTableColumnOutput)
}

type FunctionGrantArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// FunctionGrantArgumentInput is an input type that accepts FunctionGrantArgumentArgs and FunctionGrantArgumentOutput values.
// You can construct a concrete instance of `FunctionGrantArgumentInput` via:
//
//          FunctionGrantArgumentArgs{...}
type FunctionGrantArgumentInput interface {
	pulumi.Input

	ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput
	ToFunctionGrantArgumentOutputWithContext(context.Context) FunctionGrantArgumentOutput
}

type FunctionGrantArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionGrantArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionGrantArgument)(nil)).Elem()
}

func (i FunctionGrantArgumentArgs) ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput {
	return i.ToFunctionGrantArgumentOutputWithContext(context.Background())
}

func (i FunctionGrantArgumentArgs) ToFunctionGrantArgumentOutputWithContext(ctx context.Context) FunctionGrantArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionGrantArgumentOutput)
}

// FunctionGrantArgumentArrayInput is an input type that accepts FunctionGrantArgumentArray and FunctionGrantArgumentArrayOutput values.
// You can construct a concrete instance of `FunctionGrantArgumentArrayInput` via:
//
//          FunctionGrantArgumentArray{ FunctionGrantArgumentArgs{...} }
type FunctionGrantArgumentArrayInput interface {
	pulumi.Input

	ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput
	ToFunctionGrantArgumentArrayOutputWithContext(context.Context) FunctionGrantArgumentArrayOutput
}

type FunctionGrantArgumentArray []FunctionGrantArgumentInput

func (FunctionGrantArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionGrantArgument)(nil)).Elem()
}

func (i FunctionGrantArgumentArray) ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput {
	return i.ToFunctionGrantArgumentArrayOutputWithContext(context.Background())
}

func (i FunctionGrantArgumentArray) ToFunctionGrantArgumentArrayOutputWithContext(ctx context.Context) FunctionGrantArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionGrantArgumentArrayOutput)
}

type FunctionGrantArgumentOutput struct{ *pulumi.OutputState }

func (FunctionGrantArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionGrantArgument)(nil)).Elem()
}

func (o FunctionGrantArgumentOutput) ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput {
	return o
}

func (o FunctionGrantArgumentOutput) ToFunctionGrantArgumentOutputWithContext(ctx context.Context) FunctionGrantArgumentOutput {
	return o
}

// The argument name
func (o FunctionGrantArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionGrantArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o FunctionGrantArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionGrantArgument) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionGrantArgumentArrayOutput struct{ *pulumi.OutputState }

func (FunctionGrantArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionGrantArgument)(nil)).Elem()
}

func (o FunctionGrantArgumentArrayOutput) ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput {
	return o
}

func (o FunctionGrantArgumentArrayOutput) ToFunctionGrantArgumentArrayOutputWithContext(ctx context.Context) FunctionGrantArgumentArrayOutput {
	return o
}

func (o FunctionGrantArgumentArrayOutput) Index(i pulumi.IntInput) FunctionGrantArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionGrantArgument {
		return vs[0].([]FunctionGrantArgument)[vs[1].(int)]
	}).(FunctionGrantArgumentOutput)
}

type ProcedureGrantArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// ProcedureGrantArgumentInput is an input type that accepts ProcedureGrantArgumentArgs and ProcedureGrantArgumentOutput values.
// You can construct a concrete instance of `ProcedureGrantArgumentInput` via:
//
//          ProcedureGrantArgumentArgs{...}
type ProcedureGrantArgumentInput interface {
	pulumi.Input

	ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput
	ToProcedureGrantArgumentOutputWithContext(context.Context) ProcedureGrantArgumentOutput
}

type ProcedureGrantArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProcedureGrantArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureGrantArgument)(nil)).Elem()
}

func (i ProcedureGrantArgumentArgs) ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput {
	return i.ToProcedureGrantArgumentOutputWithContext(context.Background())
}

func (i ProcedureGrantArgumentArgs) ToProcedureGrantArgumentOutputWithContext(ctx context.Context) ProcedureGrantArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureGrantArgumentOutput)
}

// ProcedureGrantArgumentArrayInput is an input type that accepts ProcedureGrantArgumentArray and ProcedureGrantArgumentArrayOutput values.
// You can construct a concrete instance of `ProcedureGrantArgumentArrayInput` via:
//
//          ProcedureGrantArgumentArray{ ProcedureGrantArgumentArgs{...} }
type ProcedureGrantArgumentArrayInput interface {
	pulumi.Input

	ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput
	ToProcedureGrantArgumentArrayOutputWithContext(context.Context) ProcedureGrantArgumentArrayOutput
}

type ProcedureGrantArgumentArray []ProcedureGrantArgumentInput

func (ProcedureGrantArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureGrantArgument)(nil)).Elem()
}

func (i ProcedureGrantArgumentArray) ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput {
	return i.ToProcedureGrantArgumentArrayOutputWithContext(context.Background())
}

func (i ProcedureGrantArgumentArray) ToProcedureGrantArgumentArrayOutputWithContext(ctx context.Context) ProcedureGrantArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureGrantArgumentArrayOutput)
}

type ProcedureGrantArgumentOutput struct{ *pulumi.OutputState }

func (ProcedureGrantArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureGrantArgument)(nil)).Elem()
}

func (o ProcedureGrantArgumentOutput) ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput {
	return o
}

func (o ProcedureGrantArgumentOutput) ToProcedureGrantArgumentOutputWithContext(ctx context.Context) ProcedureGrantArgumentOutput {
	return o
}

// The argument name
func (o ProcedureGrantArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureGrantArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o ProcedureGrantArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureGrantArgument) string { return v.Type }).(pulumi.StringOutput)
}

type ProcedureGrantArgumentArrayOutput struct{ *pulumi.OutputState }

func (ProcedureGrantArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureGrantArgument)(nil)).Elem()
}

func (o ProcedureGrantArgumentArrayOutput) ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput {
	return o
}

func (o ProcedureGrantArgumentArrayOutput) ToProcedureGrantArgumentArrayOutputWithContext(ctx context.Context) ProcedureGrantArgumentArrayOutput {
	return o
}

func (o ProcedureGrantArgumentArrayOutput) Index(i pulumi.IntInput) ProcedureGrantArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProcedureGrantArgument {
		return vs[0].([]ProcedureGrantArgument)[vs[1].(int)]
	}).(ProcedureGrantArgumentOutput)
}

type TableColumn struct {
	// Column name
	Name string `pulumi:"name"`
	// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
	Nullable *bool `pulumi:"nullable"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// TableColumnInput is an input type that accepts TableColumnArgs and TableColumnOutput values.
// You can construct a concrete instance of `TableColumnInput` via:
//
//          TableColumnArgs{...}
type TableColumnInput interface {
	pulumi.Input

	ToTableColumnOutput() TableColumnOutput
	ToTableColumnOutputWithContext(context.Context) TableColumnOutput
}

type TableColumnArgs struct {
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (i TableColumnArgs) ToTableColumnOutput() TableColumnOutput {
	return i.ToTableColumnOutputWithContext(context.Background())
}

func (i TableColumnArgs) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnOutput)
}

// TableColumnArrayInput is an input type that accepts TableColumnArray and TableColumnArrayOutput values.
// You can construct a concrete instance of `TableColumnArrayInput` via:
//
//          TableColumnArray{ TableColumnArgs{...} }
type TableColumnArrayInput interface {
	pulumi.Input

	ToTableColumnArrayOutput() TableColumnArrayOutput
	ToTableColumnArrayOutputWithContext(context.Context) TableColumnArrayOutput
}

type TableColumnArray []TableColumnInput

func (TableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (i TableColumnArray) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return i.ToTableColumnArrayOutputWithContext(context.Background())
}

func (i TableColumnArray) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnArrayOutput)
}

type TableColumnOutput struct{ *pulumi.OutputState }

func (TableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (o TableColumnOutput) ToTableColumnOutput() TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return o
}

// Column name
func (o TableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Whether this column can contain null values. **Note**: Depending on your Snowflake version, the default value will not suffice if this column is used in a primary key constraint.
func (o TableColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// Column type, e.g. VARIANT
func (o TableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type TableColumnArrayOutput struct{ *pulumi.OutputState }

func (TableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) Index(i pulumi.IntInput) TableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumn {
		return vs[0].([]TableColumn)[vs[1].(int)]
	}).(TableColumnOutput)
}

type TablePrimaryKey struct {
	// Columns to use in primary key
	Keys []string `pulumi:"keys"`
	// Name of constraint
	Name *string `pulumi:"name"`
}

// TablePrimaryKeyInput is an input type that accepts TablePrimaryKeyArgs and TablePrimaryKeyOutput values.
// You can construct a concrete instance of `TablePrimaryKeyInput` via:
//
//          TablePrimaryKeyArgs{...}
type TablePrimaryKeyInput interface {
	pulumi.Input

	ToTablePrimaryKeyOutput() TablePrimaryKeyOutput
	ToTablePrimaryKeyOutputWithContext(context.Context) TablePrimaryKeyOutput
}

type TablePrimaryKeyArgs struct {
	// Columns to use in primary key
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// Name of constraint
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TablePrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return i.ToTablePrimaryKeyOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyOutput)
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return i.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i TablePrimaryKeyArgs) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyOutput).ToTablePrimaryKeyPtrOutputWithContext(ctx)
}

// TablePrimaryKeyPtrInput is an input type that accepts TablePrimaryKeyArgs, TablePrimaryKeyPtr and TablePrimaryKeyPtrOutput values.
// You can construct a concrete instance of `TablePrimaryKeyPtrInput` via:
//
//          TablePrimaryKeyArgs{...}
//
//  or:
//
//          nil
type TablePrimaryKeyPtrInput interface {
	pulumi.Input

	ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput
	ToTablePrimaryKeyPtrOutputWithContext(context.Context) TablePrimaryKeyPtrOutput
}

type tablePrimaryKeyPtrType TablePrimaryKeyArgs

func TablePrimaryKeyPtr(v *TablePrimaryKeyArgs) TablePrimaryKeyPtrInput {
	return (*tablePrimaryKeyPtrType)(v)
}

func (*tablePrimaryKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePrimaryKey)(nil)).Elem()
}

func (i *tablePrimaryKeyPtrType) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return i.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (i *tablePrimaryKeyPtrType) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TablePrimaryKeyPtrOutput)
}

type TablePrimaryKeyOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutput() TablePrimaryKeyOutput {
	return o
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyOutputWithContext(ctx context.Context) TablePrimaryKeyOutput {
	return o
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return o.ToTablePrimaryKeyPtrOutputWithContext(context.Background())
}

func (o TablePrimaryKeyOutput) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return o.ApplyT(func(v TablePrimaryKey) *TablePrimaryKey {
		return &v
	}).(TablePrimaryKeyPtrOutput)
}

// Columns to use in primary key
func (o TablePrimaryKeyOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TablePrimaryKey) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Name of constraint
func (o TablePrimaryKeyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TablePrimaryKey) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TablePrimaryKeyPtrOutput struct{ *pulumi.OutputState }

func (TablePrimaryKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TablePrimaryKey)(nil)).Elem()
}

func (o TablePrimaryKeyPtrOutput) ToTablePrimaryKeyPtrOutput() TablePrimaryKeyPtrOutput {
	return o
}

func (o TablePrimaryKeyPtrOutput) ToTablePrimaryKeyPtrOutputWithContext(ctx context.Context) TablePrimaryKeyPtrOutput {
	return o
}

func (o TablePrimaryKeyPtrOutput) Elem() TablePrimaryKeyOutput {
	return o.ApplyT(func(v *TablePrimaryKey) TablePrimaryKey { return *v }).(TablePrimaryKeyOutput)
}

// Columns to use in primary key
func (o TablePrimaryKeyPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TablePrimaryKey) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Name of constraint
func (o TablePrimaryKeyPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TablePrimaryKey) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type GetMaterializedViewsMaterializedView struct {
	Comment  string `pulumi:"comment"`
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	Schema   string `pulumi:"schema"`
}

// GetMaterializedViewsMaterializedViewInput is an input type that accepts GetMaterializedViewsMaterializedViewArgs and GetMaterializedViewsMaterializedViewOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewInput` via:
//
//          GetMaterializedViewsMaterializedViewArgs{...}
type GetMaterializedViewsMaterializedViewInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput
	ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewOutput
}

type GetMaterializedViewsMaterializedViewArgs struct {
	Comment  pulumi.StringInput `pulumi:"comment"`
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	Schema   pulumi.StringInput `pulumi:"schema"`
}

func (GetMaterializedViewsMaterializedViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return i.ToGetMaterializedViewsMaterializedViewOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArgs) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewOutput)
}

// GetMaterializedViewsMaterializedViewArrayInput is an input type that accepts GetMaterializedViewsMaterializedViewArray and GetMaterializedViewsMaterializedViewArrayOutput values.
// You can construct a concrete instance of `GetMaterializedViewsMaterializedViewArrayInput` via:
//
//          GetMaterializedViewsMaterializedViewArray{ GetMaterializedViewsMaterializedViewArgs{...} }
type GetMaterializedViewsMaterializedViewArrayInput interface {
	pulumi.Input

	ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput
	ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Context) GetMaterializedViewsMaterializedViewArrayOutput
}

type GetMaterializedViewsMaterializedViewArray []GetMaterializedViewsMaterializedViewInput

func (GetMaterializedViewsMaterializedViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return i.ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(context.Background())
}

func (i GetMaterializedViewsMaterializedViewArray) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMaterializedViewsMaterializedViewArrayOutput)
}

type GetMaterializedViewsMaterializedViewOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutput() GetMaterializedViewsMaterializedViewOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewOutput) ToGetMaterializedViewsMaterializedViewOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetMaterializedViewsMaterializedViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetMaterializedViewsMaterializedViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetMaterializedViewsMaterializedViewOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetMaterializedViewsMaterializedView) string { return v.Schema }).(pulumi.StringOutput)
}

type GetMaterializedViewsMaterializedViewArrayOutput struct{ *pulumi.OutputState }

func (GetMaterializedViewsMaterializedViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMaterializedViewsMaterializedView)(nil)).Elem()
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutput() GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) ToGetMaterializedViewsMaterializedViewArrayOutputWithContext(ctx context.Context) GetMaterializedViewsMaterializedViewArrayOutput {
	return o
}

func (o GetMaterializedViewsMaterializedViewArrayOutput) Index(i pulumi.IntInput) GetMaterializedViewsMaterializedViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMaterializedViewsMaterializedView {
		return vs[0].([]GetMaterializedViewsMaterializedView)[vs[1].(int)]
	}).(GetMaterializedViewsMaterializedViewOutput)
}

type GetSchemasSchema struct {
	Comment  string `pulumi:"comment"`
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
}

// GetSchemasSchemaInput is an input type that accepts GetSchemasSchemaArgs and GetSchemasSchemaOutput values.
// You can construct a concrete instance of `GetSchemasSchemaInput` via:
//
//          GetSchemasSchemaArgs{...}
type GetSchemasSchemaInput interface {
	pulumi.Input

	ToGetSchemasSchemaOutput() GetSchemasSchemaOutput
	ToGetSchemasSchemaOutputWithContext(context.Context) GetSchemasSchemaOutput
}

type GetSchemasSchemaArgs struct {
	Comment  pulumi.StringInput `pulumi:"comment"`
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
}

func (GetSchemasSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return i.ToGetSchemasSchemaOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaOutput)
}

// GetSchemasSchemaArrayInput is an input type that accepts GetSchemasSchemaArray and GetSchemasSchemaArrayOutput values.
// You can construct a concrete instance of `GetSchemasSchemaArrayInput` via:
//
//          GetSchemasSchemaArray{ GetSchemasSchemaArgs{...} }
type GetSchemasSchemaArrayInput interface {
	pulumi.Input

	ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput
	ToGetSchemasSchemaArrayOutputWithContext(context.Context) GetSchemasSchemaArrayOutput
}

type GetSchemasSchemaArray []GetSchemasSchemaInput

func (GetSchemasSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return i.ToGetSchemasSchemaArrayOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaArrayOutput)
}

type GetSchemasSchemaOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetSchemasSchemaOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetSchemasSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Name }).(pulumi.StringOutput)
}

type GetSchemasSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) Index(i pulumi.IntInput) GetSchemasSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemasSchema {
		return vs[0].([]GetSchemasSchema)[vs[1].(int)]
	}).(GetSchemasSchemaOutput)
}

type GetTablesTable struct {
	Comment  string `pulumi:"comment"`
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	Schema   string `pulumi:"schema"`
}

// GetTablesTableInput is an input type that accepts GetTablesTableArgs and GetTablesTableOutput values.
// You can construct a concrete instance of `GetTablesTableInput` via:
//
//          GetTablesTableArgs{...}
type GetTablesTableInput interface {
	pulumi.Input

	ToGetTablesTableOutput() GetTablesTableOutput
	ToGetTablesTableOutputWithContext(context.Context) GetTablesTableOutput
}

type GetTablesTableArgs struct {
	Comment  pulumi.StringInput `pulumi:"comment"`
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	Schema   pulumi.StringInput `pulumi:"schema"`
}

func (GetTablesTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArgs) ToGetTablesTableOutput() GetTablesTableOutput {
	return i.ToGetTablesTableOutputWithContext(context.Background())
}

func (i GetTablesTableArgs) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableOutput)
}

// GetTablesTableArrayInput is an input type that accepts GetTablesTableArray and GetTablesTableArrayOutput values.
// You can construct a concrete instance of `GetTablesTableArrayInput` via:
//
//          GetTablesTableArray{ GetTablesTableArgs{...} }
type GetTablesTableArrayInput interface {
	pulumi.Input

	ToGetTablesTableArrayOutput() GetTablesTableArrayOutput
	ToGetTablesTableArrayOutputWithContext(context.Context) GetTablesTableArrayOutput
}

type GetTablesTableArray []GetTablesTableInput

func (GetTablesTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return i.ToGetTablesTableArrayOutputWithContext(context.Background())
}

func (i GetTablesTableArray) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTablesTableArrayOutput)
}

type GetTablesTableOutput struct{ *pulumi.OutputState }

func (GetTablesTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableOutput) ToGetTablesTableOutput() GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) ToGetTablesTableOutputWithContext(ctx context.Context) GetTablesTableOutput {
	return o
}

func (o GetTablesTableOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetTablesTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetTablesTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetTablesTableOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetTablesTable) string { return v.Schema }).(pulumi.StringOutput)
}

type GetTablesTableArrayOutput struct{ *pulumi.OutputState }

func (GetTablesTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTablesTable)(nil)).Elem()
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutput() GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) ToGetTablesTableArrayOutputWithContext(ctx context.Context) GetTablesTableArrayOutput {
	return o
}

func (o GetTablesTableArrayOutput) Index(i pulumi.IntInput) GetTablesTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTablesTable {
		return vs[0].([]GetTablesTable)[vs[1].(int)]
	}).(GetTablesTableOutput)
}

type GetViewsView struct {
	Comment  string `pulumi:"comment"`
	Database string `pulumi:"database"`
	Name     string `pulumi:"name"`
	Schema   string `pulumi:"schema"`
}

// GetViewsViewInput is an input type that accepts GetViewsViewArgs and GetViewsViewOutput values.
// You can construct a concrete instance of `GetViewsViewInput` via:
//
//          GetViewsViewArgs{...}
type GetViewsViewInput interface {
	pulumi.Input

	ToGetViewsViewOutput() GetViewsViewOutput
	ToGetViewsViewOutputWithContext(context.Context) GetViewsViewOutput
}

type GetViewsViewArgs struct {
	Comment  pulumi.StringInput `pulumi:"comment"`
	Database pulumi.StringInput `pulumi:"database"`
	Name     pulumi.StringInput `pulumi:"name"`
	Schema   pulumi.StringInput `pulumi:"schema"`
}

func (GetViewsViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArgs) ToGetViewsViewOutput() GetViewsViewOutput {
	return i.ToGetViewsViewOutputWithContext(context.Background())
}

func (i GetViewsViewArgs) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewOutput)
}

// GetViewsViewArrayInput is an input type that accepts GetViewsViewArray and GetViewsViewArrayOutput values.
// You can construct a concrete instance of `GetViewsViewArrayInput` via:
//
//          GetViewsViewArray{ GetViewsViewArgs{...} }
type GetViewsViewArrayInput interface {
	pulumi.Input

	ToGetViewsViewArrayOutput() GetViewsViewArrayOutput
	ToGetViewsViewArrayOutputWithContext(context.Context) GetViewsViewArrayOutput
}

type GetViewsViewArray []GetViewsViewInput

func (GetViewsViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return i.ToGetViewsViewArrayOutputWithContext(context.Background())
}

func (i GetViewsViewArray) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetViewsViewArrayOutput)
}

type GetViewsViewOutput struct{ *pulumi.OutputState }

func (GetViewsViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetViewsView)(nil)).Elem()
}

func (o GetViewsViewOutput) ToGetViewsViewOutput() GetViewsViewOutput {
	return o
}

func (o GetViewsViewOutput) ToGetViewsViewOutputWithContext(ctx context.Context) GetViewsViewOutput {
	return o
}

func (o GetViewsViewOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetViewsViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetViewsViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetViewsViewOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v GetViewsView) string { return v.Schema }).(pulumi.StringOutput)
}

type GetViewsViewArrayOutput struct{ *pulumi.OutputState }

func (GetViewsViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetViewsView)(nil)).Elem()
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutput() GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) ToGetViewsViewArrayOutputWithContext(ctx context.Context) GetViewsViewArrayOutput {
	return o
}

func (o GetViewsViewArrayOutput) Index(i pulumi.IntInput) GetViewsViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetViewsView {
		return vs[0].([]GetViewsView)[vs[1].(int)]
	}).(GetViewsViewOutput)
}

func init() {
	pulumi.RegisterOutputType(ExternalFunctionArgOutput{})
	pulumi.RegisterOutputType(ExternalFunctionArgArrayOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderArrayOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnArrayOutput{})
	pulumi.RegisterOutputType(FunctionGrantArgumentOutput{})
	pulumi.RegisterOutputType(FunctionGrantArgumentArrayOutput{})
	pulumi.RegisterOutputType(ProcedureGrantArgumentOutput{})
	pulumi.RegisterOutputType(ProcedureGrantArgumentArrayOutput{})
	pulumi.RegisterOutputType(TableColumnOutput{})
	pulumi.RegisterOutputType(TableColumnArrayOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyOutput{})
	pulumi.RegisterOutputType(TablePrimaryKeyPtrOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewOutput{})
	pulumi.RegisterOutputType(GetMaterializedViewsMaterializedViewArrayOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetTablesTableOutput{})
	pulumi.RegisterOutputType(GetTablesTableArrayOutput{})
	pulumi.RegisterOutputType(GetViewsViewOutput{})
	pulumi.RegisterOutputType(GetViewsViewArrayOutput{})
}
