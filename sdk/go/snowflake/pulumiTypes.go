// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ExternalFunctionArg struct {
	// Argument name
	Name string `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type string `pulumi:"type"`
}

// ExternalFunctionArgInput is an input type that accepts ExternalFunctionArgArgs and ExternalFunctionArgOutput values.
// You can construct a concrete instance of `ExternalFunctionArgInput` via:
//
//          ExternalFunctionArgArgs{...}
type ExternalFunctionArgInput interface {
	pulumi.Input

	ToExternalFunctionArgOutput() ExternalFunctionArgOutput
	ToExternalFunctionArgOutputWithContext(context.Context) ExternalFunctionArgOutput
}

type ExternalFunctionArgArgs struct {
	// Argument name
	Name pulumi.StringInput `pulumi:"name"`
	// Argument type, e.g. VARCHAR
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalFunctionArgArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return i.ToExternalFunctionArgOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArgs) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgOutput)
}

// ExternalFunctionArgArrayInput is an input type that accepts ExternalFunctionArgArray and ExternalFunctionArgArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionArgArrayInput` via:
//
//          ExternalFunctionArgArray{ ExternalFunctionArgArgs{...} }
type ExternalFunctionArgArrayInput interface {
	pulumi.Input

	ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput
	ToExternalFunctionArgArrayOutputWithContext(context.Context) ExternalFunctionArgArrayOutput
}

type ExternalFunctionArgArray []ExternalFunctionArgInput

func (ExternalFunctionArgArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return i.ToExternalFunctionArgArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionArgArray) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionArgArrayOutput)
}

type ExternalFunctionArgOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutput() ExternalFunctionArgOutput {
	return o
}

func (o ExternalFunctionArgOutput) ToExternalFunctionArgOutputWithContext(ctx context.Context) ExternalFunctionArgOutput {
	return o
}

// Argument name
func (o ExternalFunctionArgOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Name }).(pulumi.StringOutput)
}

// Argument type, e.g. VARCHAR
func (o ExternalFunctionArgOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionArg) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalFunctionArgArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionArgArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionArg)(nil)).Elem()
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutput() ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) ToExternalFunctionArgArrayOutputWithContext(ctx context.Context) ExternalFunctionArgArrayOutput {
	return o
}

func (o ExternalFunctionArgArrayOutput) Index(i pulumi.IntInput) ExternalFunctionArgOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionArg {
		return vs[0].([]ExternalFunctionArg)[vs[1].(int)]
	}).(ExternalFunctionArgOutput)
}

type ExternalFunctionHeader struct {
	// Header name
	Name string `pulumi:"name"`
	// Header value
	Value string `pulumi:"value"`
}

// ExternalFunctionHeaderInput is an input type that accepts ExternalFunctionHeaderArgs and ExternalFunctionHeaderOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderInput` via:
//
//          ExternalFunctionHeaderArgs{...}
type ExternalFunctionHeaderInput interface {
	pulumi.Input

	ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput
	ToExternalFunctionHeaderOutputWithContext(context.Context) ExternalFunctionHeaderOutput
}

type ExternalFunctionHeaderArgs struct {
	// Header name
	Name pulumi.StringInput `pulumi:"name"`
	// Header value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ExternalFunctionHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return i.ToExternalFunctionHeaderOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArgs) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderOutput)
}

// ExternalFunctionHeaderArrayInput is an input type that accepts ExternalFunctionHeaderArray and ExternalFunctionHeaderArrayOutput values.
// You can construct a concrete instance of `ExternalFunctionHeaderArrayInput` via:
//
//          ExternalFunctionHeaderArray{ ExternalFunctionHeaderArgs{...} }
type ExternalFunctionHeaderArrayInput interface {
	pulumi.Input

	ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput
	ToExternalFunctionHeaderArrayOutputWithContext(context.Context) ExternalFunctionHeaderArrayOutput
}

type ExternalFunctionHeaderArray []ExternalFunctionHeaderInput

func (ExternalFunctionHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return i.ToExternalFunctionHeaderArrayOutputWithContext(context.Background())
}

func (i ExternalFunctionHeaderArray) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalFunctionHeaderArrayOutput)
}

type ExternalFunctionHeaderOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutput() ExternalFunctionHeaderOutput {
	return o
}

func (o ExternalFunctionHeaderOutput) ToExternalFunctionHeaderOutputWithContext(ctx context.Context) ExternalFunctionHeaderOutput {
	return o
}

// Header name
func (o ExternalFunctionHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Header value
func (o ExternalFunctionHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalFunctionHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ExternalFunctionHeaderArrayOutput struct{ *pulumi.OutputState }

func (ExternalFunctionHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalFunctionHeader)(nil)).Elem()
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutput() ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) ToExternalFunctionHeaderArrayOutputWithContext(ctx context.Context) ExternalFunctionHeaderArrayOutput {
	return o
}

func (o ExternalFunctionHeaderArrayOutput) Index(i pulumi.IntInput) ExternalFunctionHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalFunctionHeader {
		return vs[0].([]ExternalFunctionHeader)[vs[1].(int)]
	}).(ExternalFunctionHeaderOutput)
}

type ExternalTableColumn struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As string `pulumi:"as"`
	// Column name
	Name string `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// ExternalTableColumnInput is an input type that accepts ExternalTableColumnArgs and ExternalTableColumnOutput values.
// You can construct a concrete instance of `ExternalTableColumnInput` via:
//
//          ExternalTableColumnArgs{...}
type ExternalTableColumnInput interface {
	pulumi.Input

	ToExternalTableColumnOutput() ExternalTableColumnOutput
	ToExternalTableColumnOutputWithContext(context.Context) ExternalTableColumnOutput
}

type ExternalTableColumnArgs struct {
	// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
	As pulumi.StringInput `pulumi:"as"`
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExternalTableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return i.ToExternalTableColumnOutputWithContext(context.Background())
}

func (i ExternalTableColumnArgs) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnOutput)
}

// ExternalTableColumnArrayInput is an input type that accepts ExternalTableColumnArray and ExternalTableColumnArrayOutput values.
// You can construct a concrete instance of `ExternalTableColumnArrayInput` via:
//
//          ExternalTableColumnArray{ ExternalTableColumnArgs{...} }
type ExternalTableColumnArrayInput interface {
	pulumi.Input

	ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput
	ToExternalTableColumnArrayOutputWithContext(context.Context) ExternalTableColumnArrayOutput
}

type ExternalTableColumnArray []ExternalTableColumnInput

func (ExternalTableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return i.ToExternalTableColumnArrayOutputWithContext(context.Background())
}

func (i ExternalTableColumnArray) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalTableColumnArrayOutput)
}

type ExternalTableColumnOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutput() ExternalTableColumnOutput {
	return o
}

func (o ExternalTableColumnOutput) ToExternalTableColumnOutputWithContext(ctx context.Context) ExternalTableColumnOutput {
	return o
}

// String that specifies the expression for the column. When queried, the column returns results derived from this expression.
func (o ExternalTableColumnOutput) As() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.As }).(pulumi.StringOutput)
}

// Column name
func (o ExternalTableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Column type, e.g. VARIANT
func (o ExternalTableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalTableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type ExternalTableColumnArrayOutput struct{ *pulumi.OutputState }

func (ExternalTableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalTableColumn)(nil)).Elem()
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutput() ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) ToExternalTableColumnArrayOutputWithContext(ctx context.Context) ExternalTableColumnArrayOutput {
	return o
}

func (o ExternalTableColumnArrayOutput) Index(i pulumi.IntInput) ExternalTableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalTableColumn {
		return vs[0].([]ExternalTableColumn)[vs[1].(int)]
	}).(ExternalTableColumnOutput)
}

type FunctionGrantArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// FunctionGrantArgumentInput is an input type that accepts FunctionGrantArgumentArgs and FunctionGrantArgumentOutput values.
// You can construct a concrete instance of `FunctionGrantArgumentInput` via:
//
//          FunctionGrantArgumentArgs{...}
type FunctionGrantArgumentInput interface {
	pulumi.Input

	ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput
	ToFunctionGrantArgumentOutputWithContext(context.Context) FunctionGrantArgumentOutput
}

type FunctionGrantArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (FunctionGrantArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionGrantArgument)(nil)).Elem()
}

func (i FunctionGrantArgumentArgs) ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput {
	return i.ToFunctionGrantArgumentOutputWithContext(context.Background())
}

func (i FunctionGrantArgumentArgs) ToFunctionGrantArgumentOutputWithContext(ctx context.Context) FunctionGrantArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionGrantArgumentOutput)
}

// FunctionGrantArgumentArrayInput is an input type that accepts FunctionGrantArgumentArray and FunctionGrantArgumentArrayOutput values.
// You can construct a concrete instance of `FunctionGrantArgumentArrayInput` via:
//
//          FunctionGrantArgumentArray{ FunctionGrantArgumentArgs{...} }
type FunctionGrantArgumentArrayInput interface {
	pulumi.Input

	ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput
	ToFunctionGrantArgumentArrayOutputWithContext(context.Context) FunctionGrantArgumentArrayOutput
}

type FunctionGrantArgumentArray []FunctionGrantArgumentInput

func (FunctionGrantArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionGrantArgument)(nil)).Elem()
}

func (i FunctionGrantArgumentArray) ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput {
	return i.ToFunctionGrantArgumentArrayOutputWithContext(context.Background())
}

func (i FunctionGrantArgumentArray) ToFunctionGrantArgumentArrayOutputWithContext(ctx context.Context) FunctionGrantArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionGrantArgumentArrayOutput)
}

type FunctionGrantArgumentOutput struct{ *pulumi.OutputState }

func (FunctionGrantArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionGrantArgument)(nil)).Elem()
}

func (o FunctionGrantArgumentOutput) ToFunctionGrantArgumentOutput() FunctionGrantArgumentOutput {
	return o
}

func (o FunctionGrantArgumentOutput) ToFunctionGrantArgumentOutputWithContext(ctx context.Context) FunctionGrantArgumentOutput {
	return o
}

// The argument name
func (o FunctionGrantArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionGrantArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o FunctionGrantArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionGrantArgument) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionGrantArgumentArrayOutput struct{ *pulumi.OutputState }

func (FunctionGrantArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionGrantArgument)(nil)).Elem()
}

func (o FunctionGrantArgumentArrayOutput) ToFunctionGrantArgumentArrayOutput() FunctionGrantArgumentArrayOutput {
	return o
}

func (o FunctionGrantArgumentArrayOutput) ToFunctionGrantArgumentArrayOutputWithContext(ctx context.Context) FunctionGrantArgumentArrayOutput {
	return o
}

func (o FunctionGrantArgumentArrayOutput) Index(i pulumi.IntInput) FunctionGrantArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionGrantArgument {
		return vs[0].([]FunctionGrantArgument)[vs[1].(int)]
	}).(FunctionGrantArgumentOutput)
}

type ProcedureGrantArgument struct {
	// The argument name
	Name string `pulumi:"name"`
	// The argument type
	Type string `pulumi:"type"`
}

// ProcedureGrantArgumentInput is an input type that accepts ProcedureGrantArgumentArgs and ProcedureGrantArgumentOutput values.
// You can construct a concrete instance of `ProcedureGrantArgumentInput` via:
//
//          ProcedureGrantArgumentArgs{...}
type ProcedureGrantArgumentInput interface {
	pulumi.Input

	ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput
	ToProcedureGrantArgumentOutputWithContext(context.Context) ProcedureGrantArgumentOutput
}

type ProcedureGrantArgumentArgs struct {
	// The argument name
	Name pulumi.StringInput `pulumi:"name"`
	// The argument type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ProcedureGrantArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureGrantArgument)(nil)).Elem()
}

func (i ProcedureGrantArgumentArgs) ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput {
	return i.ToProcedureGrantArgumentOutputWithContext(context.Background())
}

func (i ProcedureGrantArgumentArgs) ToProcedureGrantArgumentOutputWithContext(ctx context.Context) ProcedureGrantArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureGrantArgumentOutput)
}

// ProcedureGrantArgumentArrayInput is an input type that accepts ProcedureGrantArgumentArray and ProcedureGrantArgumentArrayOutput values.
// You can construct a concrete instance of `ProcedureGrantArgumentArrayInput` via:
//
//          ProcedureGrantArgumentArray{ ProcedureGrantArgumentArgs{...} }
type ProcedureGrantArgumentArrayInput interface {
	pulumi.Input

	ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput
	ToProcedureGrantArgumentArrayOutputWithContext(context.Context) ProcedureGrantArgumentArrayOutput
}

type ProcedureGrantArgumentArray []ProcedureGrantArgumentInput

func (ProcedureGrantArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureGrantArgument)(nil)).Elem()
}

func (i ProcedureGrantArgumentArray) ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput {
	return i.ToProcedureGrantArgumentArrayOutputWithContext(context.Background())
}

func (i ProcedureGrantArgumentArray) ToProcedureGrantArgumentArrayOutputWithContext(ctx context.Context) ProcedureGrantArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureGrantArgumentArrayOutput)
}

type ProcedureGrantArgumentOutput struct{ *pulumi.OutputState }

func (ProcedureGrantArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcedureGrantArgument)(nil)).Elem()
}

func (o ProcedureGrantArgumentOutput) ToProcedureGrantArgumentOutput() ProcedureGrantArgumentOutput {
	return o
}

func (o ProcedureGrantArgumentOutput) ToProcedureGrantArgumentOutputWithContext(ctx context.Context) ProcedureGrantArgumentOutput {
	return o
}

// The argument name
func (o ProcedureGrantArgumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureGrantArgument) string { return v.Name }).(pulumi.StringOutput)
}

// The argument type
func (o ProcedureGrantArgumentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProcedureGrantArgument) string { return v.Type }).(pulumi.StringOutput)
}

type ProcedureGrantArgumentArrayOutput struct{ *pulumi.OutputState }

func (ProcedureGrantArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcedureGrantArgument)(nil)).Elem()
}

func (o ProcedureGrantArgumentArrayOutput) ToProcedureGrantArgumentArrayOutput() ProcedureGrantArgumentArrayOutput {
	return o
}

func (o ProcedureGrantArgumentArrayOutput) ToProcedureGrantArgumentArrayOutputWithContext(ctx context.Context) ProcedureGrantArgumentArrayOutput {
	return o
}

func (o ProcedureGrantArgumentArrayOutput) Index(i pulumi.IntInput) ProcedureGrantArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProcedureGrantArgument {
		return vs[0].([]ProcedureGrantArgument)[vs[1].(int)]
	}).(ProcedureGrantArgumentOutput)
}

type TableColumn struct {
	// Column name
	Name string `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type string `pulumi:"type"`
}

// TableColumnInput is an input type that accepts TableColumnArgs and TableColumnOutput values.
// You can construct a concrete instance of `TableColumnInput` via:
//
//          TableColumnArgs{...}
type TableColumnInput interface {
	pulumi.Input

	ToTableColumnOutput() TableColumnOutput
	ToTableColumnOutputWithContext(context.Context) TableColumnOutput
}

type TableColumnArgs struct {
	// Column name
	Name pulumi.StringInput `pulumi:"name"`
	// Column type, e.g. VARIANT
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (i TableColumnArgs) ToTableColumnOutput() TableColumnOutput {
	return i.ToTableColumnOutputWithContext(context.Background())
}

func (i TableColumnArgs) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnOutput)
}

// TableColumnArrayInput is an input type that accepts TableColumnArray and TableColumnArrayOutput values.
// You can construct a concrete instance of `TableColumnArrayInput` via:
//
//          TableColumnArray{ TableColumnArgs{...} }
type TableColumnArrayInput interface {
	pulumi.Input

	ToTableColumnArrayOutput() TableColumnArrayOutput
	ToTableColumnArrayOutputWithContext(context.Context) TableColumnArrayOutput
}

type TableColumnArray []TableColumnInput

func (TableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (i TableColumnArray) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return i.ToTableColumnArrayOutputWithContext(context.Background())
}

func (i TableColumnArray) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableColumnArrayOutput)
}

type TableColumnOutput struct{ *pulumi.OutputState }

func (TableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableColumn)(nil)).Elem()
}

func (o TableColumnOutput) ToTableColumnOutput() TableColumnOutput {
	return o
}

func (o TableColumnOutput) ToTableColumnOutputWithContext(ctx context.Context) TableColumnOutput {
	return o
}

// Column name
func (o TableColumnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Name }).(pulumi.StringOutput)
}

// Column type, e.g. VARIANT
func (o TableColumnOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableColumn) string { return v.Type }).(pulumi.StringOutput)
}

type TableColumnArrayOutput struct{ *pulumi.OutputState }

func (TableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableColumn)(nil)).Elem()
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutput() TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) ToTableColumnArrayOutputWithContext(ctx context.Context) TableColumnArrayOutput {
	return o
}

func (o TableColumnArrayOutput) Index(i pulumi.IntInput) TableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableColumn {
		return vs[0].([]TableColumn)[vs[1].(int)]
	}).(TableColumnOutput)
}

func init() {
	pulumi.RegisterOutputType(ExternalFunctionArgOutput{})
	pulumi.RegisterOutputType(ExternalFunctionArgArrayOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderOutput{})
	pulumi.RegisterOutputType(ExternalFunctionHeaderArrayOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnOutput{})
	pulumi.RegisterOutputType(ExternalTableColumnArrayOutput{})
	pulumi.RegisterOutputType(FunctionGrantArgumentOutput{})
	pulumi.RegisterOutputType(FunctionGrantArgumentArrayOutput{})
	pulumi.RegisterOutputType(ProcedureGrantArgumentOutput{})
	pulumi.RegisterOutputType(ProcedureGrantArgumentArrayOutput{})
	pulumi.RegisterOutputType(TableColumnOutput{})
	pulumi.RegisterOutputType(TableColumnArrayOutput{})
}
