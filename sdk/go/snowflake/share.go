// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package snowflake

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ```sh
//  $ pulumi import snowflake:index/share:Share example name
// ```
type Share struct {
	pulumi.CustomResourceState

	// A list of accounts to be added to the share.
	Accounts pulumi.StringArrayOutput `pulumi:"accounts"`
	// Specifies a comment for the managed account.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Specifies the identifier for the share; must be unique for the account in which the share is created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewShare registers a new resource with the given unique name, arguments, and options.
func NewShare(ctx *pulumi.Context,
	name string, args *ShareArgs, opts ...pulumi.ResourceOption) (*Share, error) {
	if args == nil {
		args = &ShareArgs{}
	}

	var resource Share
	err := ctx.RegisterResource("snowflake:index/share:Share", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShare gets an existing Share resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareState, opts ...pulumi.ResourceOption) (*Share, error) {
	var resource Share
	err := ctx.ReadResource("snowflake:index/share:Share", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Share resources.
type shareState struct {
	// A list of accounts to be added to the share.
	Accounts []string `pulumi:"accounts"`
	// Specifies a comment for the managed account.
	Comment *string `pulumi:"comment"`
	// Specifies the identifier for the share; must be unique for the account in which the share is created.
	Name *string `pulumi:"name"`
}

type ShareState struct {
	// A list of accounts to be added to the share.
	Accounts pulumi.StringArrayInput
	// Specifies a comment for the managed account.
	Comment pulumi.StringPtrInput
	// Specifies the identifier for the share; must be unique for the account in which the share is created.
	Name pulumi.StringPtrInput
}

func (ShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareState)(nil)).Elem()
}

type shareArgs struct {
	// A list of accounts to be added to the share.
	Accounts []string `pulumi:"accounts"`
	// Specifies a comment for the managed account.
	Comment *string `pulumi:"comment"`
	// Specifies the identifier for the share; must be unique for the account in which the share is created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Share resource.
type ShareArgs struct {
	// A list of accounts to be added to the share.
	Accounts pulumi.StringArrayInput
	// Specifies a comment for the managed account.
	Comment pulumi.StringPtrInput
	// Specifies the identifier for the share; must be unique for the account in which the share is created.
	Name pulumi.StringPtrInput
}

func (ShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareArgs)(nil)).Elem()
}

type ShareInput interface {
	pulumi.Input

	ToShareOutput() ShareOutput
	ToShareOutputWithContext(ctx context.Context) ShareOutput
}

func (*Share) ElementType() reflect.Type {
	return reflect.TypeOf((*Share)(nil))
}

func (i *Share) ToShareOutput() ShareOutput {
	return i.ToShareOutputWithContext(context.Background())
}

func (i *Share) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareOutput)
}

func (i *Share) ToSharePtrOutput() SharePtrOutput {
	return i.ToSharePtrOutputWithContext(context.Background())
}

func (i *Share) ToSharePtrOutputWithContext(ctx context.Context) SharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePtrOutput)
}

type SharePtrInput interface {
	pulumi.Input

	ToSharePtrOutput() SharePtrOutput
	ToSharePtrOutputWithContext(ctx context.Context) SharePtrOutput
}

type sharePtrType ShareArgs

func (*sharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil))
}

func (i *sharePtrType) ToSharePtrOutput() SharePtrOutput {
	return i.ToSharePtrOutputWithContext(context.Background())
}

func (i *sharePtrType) ToSharePtrOutputWithContext(ctx context.Context) SharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharePtrOutput)
}

// ShareArrayInput is an input type that accepts ShareArray and ShareArrayOutput values.
// You can construct a concrete instance of `ShareArrayInput` via:
//
//          ShareArray{ ShareArgs{...} }
type ShareArrayInput interface {
	pulumi.Input

	ToShareArrayOutput() ShareArrayOutput
	ToShareArrayOutputWithContext(context.Context) ShareArrayOutput
}

type ShareArray []ShareInput

func (ShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Share)(nil)).Elem()
}

func (i ShareArray) ToShareArrayOutput() ShareArrayOutput {
	return i.ToShareArrayOutputWithContext(context.Background())
}

func (i ShareArray) ToShareArrayOutputWithContext(ctx context.Context) ShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareArrayOutput)
}

// ShareMapInput is an input type that accepts ShareMap and ShareMapOutput values.
// You can construct a concrete instance of `ShareMapInput` via:
//
//          ShareMap{ "key": ShareArgs{...} }
type ShareMapInput interface {
	pulumi.Input

	ToShareMapOutput() ShareMapOutput
	ToShareMapOutputWithContext(context.Context) ShareMapOutput
}

type ShareMap map[string]ShareInput

func (ShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Share)(nil)).Elem()
}

func (i ShareMap) ToShareMapOutput() ShareMapOutput {
	return i.ToShareMapOutputWithContext(context.Background())
}

func (i ShareMap) ToShareMapOutputWithContext(ctx context.Context) ShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareMapOutput)
}

type ShareOutput struct{ *pulumi.OutputState }

func (ShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Share)(nil))
}

func (o ShareOutput) ToShareOutput() ShareOutput {
	return o
}

func (o ShareOutput) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return o
}

func (o ShareOutput) ToSharePtrOutput() SharePtrOutput {
	return o.ToSharePtrOutputWithContext(context.Background())
}

func (o ShareOutput) ToSharePtrOutputWithContext(ctx context.Context) SharePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Share) *Share {
		return &v
	}).(SharePtrOutput)
}

type SharePtrOutput struct{ *pulumi.OutputState }

func (SharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil))
}

func (o SharePtrOutput) ToSharePtrOutput() SharePtrOutput {
	return o
}

func (o SharePtrOutput) ToSharePtrOutputWithContext(ctx context.Context) SharePtrOutput {
	return o
}

func (o SharePtrOutput) Elem() ShareOutput {
	return o.ApplyT(func(v *Share) Share {
		if v != nil {
			return *v
		}
		var ret Share
		return ret
	}).(ShareOutput)
}

type ShareArrayOutput struct{ *pulumi.OutputState }

func (ShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Share)(nil))
}

func (o ShareArrayOutput) ToShareArrayOutput() ShareArrayOutput {
	return o
}

func (o ShareArrayOutput) ToShareArrayOutputWithContext(ctx context.Context) ShareArrayOutput {
	return o
}

func (o ShareArrayOutput) Index(i pulumi.IntInput) ShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Share {
		return vs[0].([]Share)[vs[1].(int)]
	}).(ShareOutput)
}

type ShareMapOutput struct{ *pulumi.OutputState }

func (ShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Share)(nil))
}

func (o ShareMapOutput) ToShareMapOutput() ShareMapOutput {
	return o
}

func (o ShareMapOutput) ToShareMapOutputWithContext(ctx context.Context) ShareMapOutput {
	return o
}

func (o ShareMapOutput) MapIndex(k pulumi.StringInput) ShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Share {
		return vs[0].(map[string]Share)[vs[1].(string)]
	}).(ShareOutput)
}

func init() {
	pulumi.RegisterOutputType(ShareOutput{})
	pulumi.RegisterOutputType(SharePtrOutput{})
	pulumi.RegisterOutputType(ShareArrayOutput{})
	pulumi.RegisterOutputType(ShareMapOutput{})
}
